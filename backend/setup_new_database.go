package main

import (
	"database/sql"
	"fmt"
	"log"

	_ "github.com/lib/pq"
)

func main() {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
	db, err := sql.Open("postgres", "user=sonara_space password=sonara_space_pass dbname=sonara_space host=127.0.0.1 port=5432 sslmode=disable")
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	if err := db.Ping(); err != nil {
		log.Fatal("Failed to ping database:", err)
	}

	fmt.Println("‚úÖ Connected to Sonara Space database successfully!")

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	migrations := []string{
		// 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
		`CREATE TABLE IF NOT EXISTS users (
			id SERIAL PRIMARY KEY,
			email VARCHAR(255) UNIQUE NOT NULL,
			password_hash VARCHAR(255) NOT NULL,
			first_name VARCHAR(100),
			last_name VARCHAR(100),
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
			updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		);`,

		// 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subscriptions
		`CREATE TABLE IF NOT EXISTS subscriptions (
			id SERIAL PRIMARY KEY,
			user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
			plan VARCHAR(50) NOT NULL,
			status VARCHAR(20) DEFAULT 'active',
			start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
			end_date TIMESTAMP,
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
			updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		);`,

		// 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã payments
		`CREATE TABLE IF NOT EXISTS payments (
			id SERIAL PRIMARY KEY,
			user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
			subscription_id INTEGER REFERENCES subscriptions(id) ON DELETE CASCADE,
			amount DECIMAL(10,2) NOT NULL,
			currency VARCHAR(3) DEFAULT 'USD',
			status VARCHAR(20) DEFAULT 'pending',
			payment_method VARCHAR(50),
			transaction_id VARCHAR(255),
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
			updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		);`,

		// 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã lessons
		`CREATE TABLE IF NOT EXISTS lessons (
			id SERIAL PRIMARY KEY,
			title VARCHAR(255) NOT NULL,
			instrument VARCHAR(50) NOT NULL,
			description TEXT,
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		);`,

		// 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã exercises
		`CREATE TABLE IF NOT EXISTS exercises (
			id SERIAL PRIMARY KEY,
			lesson_id INTEGER REFERENCES lessons(id) ON DELETE CASCADE,
			title VARCHAR(255) NOT NULL,
			expected VARCHAR(100) NOT NULL,
			type VARCHAR(50) NOT NULL,
			sequence TEXT,
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		);`,

		// 6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã progress
		`CREATE TABLE IF NOT EXISTS progress (
			id SERIAL PRIMARY KEY,
			user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
			exercise_id INTEGER REFERENCES exercises(id) ON DELETE CASCADE,
			status VARCHAR(20) DEFAULT 'pending',
			completed_at TIMESTAMP,
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
			updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
			UNIQUE(user_id, exercise_id)
		);`,
	}

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	for i, migration := range migrations {
		fmt.Printf("Executing migration %d...\n", i+1)
		if _, err := db.Exec(migration); err != nil {
			log.Fatalf("Failed to execute migration %d: %v", i+1, err)
		}
	}

	fmt.Println("‚úÖ All migrations completed successfully!")

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("Adding sample lessons...")

	// –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫–∏
	lessons := []struct {
		title       string
		instrument  string
		description string
	}{
		{"–ë–∞–∑–æ–≤—ã–µ –∞–∫–∫–æ—Ä–¥—ã –≥–∏—Ç–∞—Ä—ã", "guitar", "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã C, Am, F, G"},
		{"–ë–∞–∑–æ–≤—ã–µ –∞–∫–∫–æ—Ä–¥—ã –ø–∏–∞–Ω–∏–Ω–æ", "piano", "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã C, Am, F, G –Ω–∞ –ø–∏–∞–Ω–∏–Ω–æ"},
		{"–ù–æ—Ç—ã –≥–∏—Ç–∞—Ä—ã", "guitar", "–ò–∑—É—á–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–æ—Ç—ã –Ω–∞ –≥–∏—Ç–∞—Ä–µ"},
		{"–ù–æ—Ç—ã –ø–∏–∞–Ω–∏–Ω–æ", "piano", "–ò–∑—É—á–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–æ—Ç—ã –Ω–∞ –ø–∏–∞–Ω–∏–Ω–æ"},
		{"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫–∫–æ—Ä–¥–æ–≤", "guitar", "–ò–∑—É—á–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫–∫–æ—Ä–¥–æ–≤"},
		{"–ü–µ—Å–Ω–∏ –∏ –º–µ–ª–æ–¥–∏–∏", "guitar", "–ò–∑—É—á–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–µ—Å–Ω–∏ –∏ –º–µ–ª–æ–¥–∏–∏"},
	}

	for _, lesson := range lessons {
		var lessonID int
		err := db.QueryRow(`
			INSERT INTO lessons (title, instrument, description) 
			VALUES ($1, $2, $3) 
			ON CONFLICT DO NOTHING 
			RETURNING id
		`, lesson.title, lesson.instrument, lesson.description).Scan(&lessonID)

		if err != nil && err != sql.ErrNoRows {
			log.Printf("Warning: Failed to insert lesson %s: %v", lesson.title, err)
		} else if err == nil {
			fmt.Printf("‚úÖ Added lesson: %s (ID: %d)\n", lesson.title, lessonID)
		}
	}

	fmt.Println("‚úÖ Database setup completed successfully!")
	fmt.Println("üéâ Sonara Space database is ready to use!")
}
