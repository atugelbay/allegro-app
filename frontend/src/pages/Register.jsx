import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../hooks/useAuth";
import { api } from "../api";
import "../register-styles.css";

export default function Register() {
  const [email, setEmail] = useState("");
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [msg, setMsg] = useState("");
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const { login } = useAuth();
  const nav = useNavigate();

  const submit = async (e) => {
    e.preventDefault();
    setMsg("");
    setLoading(true);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email || !firstName || !lastName || !password || !confirmPassword) {
      setMsg("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
      setLoading(false);
      return;
    }

    if (password !== confirmPassword) {
      setMsg("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setMsg("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
      setLoading(false);
      return;
    }

    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await api("/auth/register", { 
        method: "POST", 
        body: { 
          email, 
          password, 
          first_name: firstName, 
          last_name: lastName 
        }, 
        auth: false 
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const loginData = await api("/auth/login", { 
        method: "POST", 
        body: { email, password }, 
        auth: false 
      });
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –∏—Ö
      let parsedData = loginData;
      if (typeof loginData === 'string') {
        parsedData = JSON.parse(loginData);
      }
      
      // –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
      login(parsedData.access_token, parsedData.refresh_token);
      
      setSuccess(true);
      setMsg("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Allegro!");
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        nav("/");
      }, 1000);
      
    } catch (e) {
      console.error("Registration error:", e);
      setMsg(e.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-card animate-slide-in">
          {/* Header */}
          <div className="auth-header">
            <div className="auth-logo">üéµ</div>
            <h1 className="auth-title">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!</h1>
            <p className="auth-subtitle">–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç Allegro –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ</p>
          </div>

          {/* Message */}
          {msg && (
            <div className={`message ${success ? 'message-success' : 'message-error'}`}>
              {msg}
            </div>
          )}

          {/* Registration Form */}
          {!success && (
            <form onSubmit={submit} className="auth-form">
              <div className="form-group">
                <label className="form-label">Email</label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="example@allegro.com"
                  className="form-input"
                  required
                  disabled={loading}
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label className="form-label">–ò–º—è</label>
                  <input
                    type="text"
                    value={firstName}
                    onChange={(e) => setFirstName(e.target.value)}
                    placeholder="–í–∞—à–µ –∏–º—è"
                    className="form-input"
                    required
                    disabled={loading}
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">–§–∞–º–∏–ª–∏—è</label>
                  <input
                    type="text"
                    value={lastName}
                    onChange={(e) => setLastName(e.target.value)}
                    placeholder="–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è"
                    className="form-input"
                    required
                    disabled={loading}
                  />
                </div>
              </div>

              <div className="form-group">
                <label className="form-label">–ü–∞—Ä–æ–ª—å</label>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
                  className="form-input"
                  required
                  disabled={loading}
                />
              </div>

              <div className="form-group">
                <label className="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                <input
                  type="password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  className="form-input"
                  required
                  disabled={loading}
                />
              </div>

              <button 
                type="submit" 
                className="btn btn-primary auth-submit"
                disabled={loading}
              >
                {loading ? (
                  <>
                    <div className="spinner"></div>
                    –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...
                  </>
                ) : (
                  '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
                )}
              </button>
            </form>
          )}

          {/* Success Message */}
          {success && (
            <div className="success-content">
              <div className="success-icon">‚úÖ</div>
              <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...</p>
            </div>
          )}

          {/* Auth Links */}
          <div className="auth-links-footer">
            <p>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? 
              <Link to="/login" className="auth-link"> –í–æ–π—Ç–∏</Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
