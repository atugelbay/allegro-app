import { useRef, useState, useEffect, useCallback } from "react";
import { PitchDetector } from "pitchy";

const PitchTrainerPitchy = ({ expected, onSuccess, hidden = false }) => {
  const [running, setRunning] = useState(false);
  const [mode, setMode] = useState("guitar"); // guitar, piano, chord
  const [freq, setFreq] = useState(null);
  const [cents, setCents] = useState(null);
  const [result, setResult] = useState(null);
  const [volume, setVolume] = useState(0);
  const [error, setError] = useState(null);
  const [isCorrect, setIsCorrect] = useState(false);

  const audioCtxRef = useRef(null);
  const pitchyDetectorRef = useRef(null);
  const streamRef = useRef(null);
  const animationRef = useRef(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ expected –∑–Ω–∞—á–µ–Ω–∏—é
  useEffect(() => {
    if (!expected || !result) {
      setIsCorrect(false);
      return;
    }

    // –î–ª—è –Ω–æ—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üéØ C4 (+2.3¬¢)")
    const noteMatch = result.match(/([A-G][#b]?\d+)/);
    if (noteMatch) {
      const detected = noteMatch[1];
      const correct = detected === expected;
      setIsCorrect(correct);

      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –≤—ã–∑—ã–≤–∞–µ–º onSuccess —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      if (correct && onSuccess) {
        setTimeout(() => {
          onSuccess();
        }, 1000);
      }
    }
  }, [result, expected, onSuccess]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞—Ä–º–æ–Ω–∏–∫ (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è)
  const correctHarmonics = useCallback((freq) => {
    if (!freq || freq < 80) return freq;
    
    // –¢–æ–ª—å–∫–æ –¥–ª—è –æ—á–µ–Ω—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –≥–∞—Ä–º–æ–Ω–∏–∫
    // A4 –≥–∞—Ä–º–æ–Ω–∏–∫–∞ (880 Hz) - —ç—Ç–æ —Ç–æ—á–Ω–æ –≥–∞—Ä–º–æ–Ω–∏–∫–∞
    if (Math.abs(freq - 880) < 30) {
      return 440;
    }
    
    // E5 –≥–∞—Ä–º–æ–Ω–∏–∫–∞ (1318.51 Hz) - —ç—Ç–æ —Ç–æ—á–Ω–æ –≥–∞—Ä–º–æ–Ω–∏–∫–∞ E4 (659.25 Hz)
    if (Math.abs(freq - 1318.51) < 30) {
      return 659.25;
    }
    
    // C5 –≥–∞—Ä–º–æ–Ω–∏–∫–∞ (1046.5 Hz) - —ç—Ç–æ —Ç–æ—á–Ω–æ –≥–∞—Ä–º–æ–Ω–∏–∫–∞ C4 (523.25 Hz)
    if (Math.abs(freq - 1046.5) < 30) {
      return 523.25;
    }
    
    // G4 –≥–∞—Ä–º–æ–Ω–∏–∫–∞ (783.99 Hz) - —ç—Ç–æ —Ç–æ—á–Ω–æ –≥–∞—Ä–º–æ–Ω–∏–∫–∞ G3 (392.00 Hz)
    if (Math.abs(freq - 783.99) < 30) {
      return 392.00;
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ - –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –ò —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 2 –¥–∞–µ—Ç —Ä–∞–∑—É–º–Ω—É—é –Ω–æ—Ç—É
    if (freq > 800) {
      const halfFreq = freq / 2;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ä–∞–∑—É–º–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
      if (halfFreq >= 200 && halfFreq <= 600) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–∏–∑–æ–∫ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –Ω–æ—Ç–µ
        const closest = findClosestNote(halfFreq);
        if (closest && Math.abs(closest.cents) < 50) { // –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 50 —Ü–µ–Ω—Ç–æ–≤
          return halfFreq;
        }
      }
    }
    
    return freq;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∞—Å—Ç–æ—Ç—ã –≤ –Ω–æ—Ç—É
  const freqToNote = (freq) => {
    if (!freq) return null;
    
    const A4 = 440;
    const notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'];
    
    const semitones = 12 * Math.log2(freq / A4);
    const octave = Math.floor(semitones / 12) + 4;
    const noteIndex = Math.round(((semitones % 12) + 12) % 12);
    const note = notes[noteIndex];
    
    console.log(`üéµ freqToNote: ${freq.toFixed(2)}Hz ‚Üí ${note}${octave} (semitones: ${semitones.toFixed(2)}, octave: ${octave})`);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ç A –∏ B - –æ–Ω–∏ —á–∞—Å—Ç–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ–∫—Ç–∞–≤—É –≤—ã—à–µ
    let correctedOctave = octave;
    if (note === 'A' || note === 'A#' || note === 'B') {
      // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –æ–∫—Ç–∞–≤ 4 –∏ –≤—ã—à–µ
      if (octave >= 4) {
        correctedOctave = octave - 1;
        console.log(`üîß –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–∫—Ç–∞–≤—ã –¥–ª—è ${note}: ${octave} ‚Üí ${correctedOctave}`);
      } 
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –æ–∫—Ç–∞–≤—ã 3, –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ A2 –∏–ª–∏ B2
      else if (octave === 3 && (note === 'A' || note === 'B')) {
        correctedOctave = octave - 1;
        console.log(`üîß –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è A3/B3 ‚Üí A2/B2 –¥–ª—è ${note}: ${octave} ‚Üí ${correctedOctave}`);
      } else {
        console.log(`‚úÖ –ë–ï–ó –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–ª—è ${note}${octave} (–æ–∫—Ç–∞–≤–∞ ${octave})`);
      }
    }
    
    return `${note}${correctedOctave}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–π –Ω–æ—Ç—ã
  const findClosestNote = (frequency) => {
    const notes = [
      { name: 'C', freq: 261.63 }, { name: 'C#', freq: 277.18 }, { name: 'D', freq: 293.66 },
      { name: 'D#', freq: 311.13 }, { name: 'E', freq: 329.63 }, { name: 'F', freq: 349.23 },
      { name: 'F#', freq: 369.99 }, { name: 'G', freq: 392.00 }, { name: 'G#', freq: 415.30 },
      { name: 'A', freq: 440.00 }, { name: 'A#', freq: 466.16 }, { name: 'B', freq: 493.88 }
    ];

    let closest = null;
    let minDiff = Infinity;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–∫—Ç–∞–≤
    for (let octave = 1; octave <= 7; octave++) {
      const multiplier = Math.pow(2, octave - 4); // A4 = 440 Hz –≤ 4-–π –æ–∫—Ç–∞–≤–µ
      
      for (const note of notes) {
        const noteFreq = note.freq * multiplier;
        const diff = Math.abs(frequency - noteFreq);
        
        if (diff < minDiff) {
          minDiff = diff;
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ç A –∏ B - –æ–Ω–∏ —á–∞—Å—Ç–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ–∫—Ç–∞–≤—É –≤—ã—à–µ
          let correctedOctave = octave;
          if (note.name === 'A' || note.name === 'A#' || note.name === 'B') {
            // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –æ–∫—Ç–∞–≤ 4 –∏ –≤—ã—à–µ
            if (octave >= 4) {
              correctedOctave = octave - 1;
              console.log(`üîß findClosestNote –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è ${note.name}: ${octave} ‚Üí ${correctedOctave}`);
            }
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –æ–∫—Ç–∞–≤—ã 3, –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ A2 –∏–ª–∏ B2
            else if (octave === 3 && (note.name === 'A' || note.name === 'B')) {
              correctedOctave = octave - 1;
              console.log(`üîß findClosestNote —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è A3/B3 ‚Üí A2/B2 –¥–ª—è ${note.name}: ${octave} ‚Üí ${correctedOctave}`);
            } else {
              console.log(`‚úÖ findClosestNote –ë–ï–ó –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–ª—è ${note.name}${octave} (–æ–∫—Ç–∞–≤–∞ ${octave})`);
            }
          }
          
          closest = {
            note: `${note.name}${correctedOctave}`,
            freq: noteFreq,
            cents: 1200 * Math.log2(frequency / noteFreq)
          };
        }
      }
    }

    return closest;
  };

  const startTuner = useCallback(async () => {
    try {
      setError(null);
      
      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      audioCtxRef.current = audioCtx;

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pitchy –¥–µ—Ç–µ–∫—Ç–æ—Ä
      pitchyDetectorRef.current = PitchDetector.forFloat32Array(2048);

      await audioCtx.resume();
      
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      streamRef.current = stream;
      
      const source = audioCtx.createMediaStreamSource(stream);
      const analyser = audioCtx.createAnalyser();
      
      analyser.fftSize = 2048;
      analyser.smoothingTimeConstant = 0.3;
      analyser.minDecibels = -90;
      analyser.maxDecibels = -10;
      
      source.connect(analyser);
      
      const timeBuf = new Float32Array(analyser.fftSize);

      function loop() {
        analyser.getFloatTimeDomainData(timeBuf);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        let sum = 0;
        for (let i = 0; i < timeBuf.length; i++) {
          sum += timeBuf[i] * timeBuf[i];
        }
        const rms = Math.sqrt(sum / timeBuf.length);
        setVolume(rms * 100);

        if (rms > 0.02) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
          // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ø–∏—Ç—á —Å –ø–æ–º–æ—â—å—é Pitchy
          const [detectedFreq, confidence] = pitchyDetectorRef.current.findPitch(timeBuf, audioCtx.sampleRate);
          
          if (detectedFreq && confidence > 0.3) {
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è (–≤–æ–∑–º–æ–∂–Ω–∞ –≥–∞—Ä–º–æ–Ω–∏–∫–∞)
            let correctedFreq = detectedFreq;
            
            // –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è –∏ —á–∞—Å—Ç–æ—Ç–∞ –≤—ã—Å–æ–∫–∞—è - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≥–∞—Ä–º–æ–Ω–∏–∫–∞
            if (confidence < 0.6 && detectedFreq > 600) {
              correctedFreq = correctHarmonics(detectedFreq);
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if (correctedFreq !== detectedFreq) {
              console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏–∫–∏: ${detectedFreq.toFixed(2)} Hz ‚Üí ${correctedFreq.toFixed(2)} Hz (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(confidence * 100).toFixed(1)}%)`);
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –Ω–æ—Ç—É
            const closest = findClosestNote(correctedFreq);
            
            if (closest) {
              setFreq(correctedFreq);
              setCents(closest.cents);
              
              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              const noteName = freqToNote(correctedFreq);
              const centsDiff = closest.cents;
              const tuningStatus = Math.abs(centsDiff) < 5 ? "‚úÖ" : 
                                  Math.abs(centsDiff) < 20 ? "‚ö†Ô∏è" : "‚ùå";
              
              setResult(`${tuningStatus} ${noteName} (${centsDiff > 0 ? '+' : ''}${centsDiff.toFixed(1)}¬¢)`);
            }
          } else {
            setFreq(null);
            setCents(null);
            setResult(null);
          }
        } else {
          setFreq(null);
          setCents(null);
          setResult(null);
        }

        animationRef.current = requestAnimationFrame(loop);
      }

      setRunning(true);
      loop();
      
    } catch (err) {
      console.error("Error starting tuner:", err);
      setError(`–û—à–∏–±–∫–∞: ${err.message}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø.`);
      setRunning(false);
    }
  }, [correctHarmonics]);

  const stopTuner = useCallback(() => {
    setRunning(false);
    
    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current);
    }
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    
    if (audioCtxRef.current) {
      audioCtxRef.current.close();
      audioCtxRef.current = null;
    }
    
    if (pitchyDetectorRef.current) {
      pitchyDetectorRef.current = null;
    }
    
    setFreq(null);
    setCents(null);
    setResult(null);
    setVolume(0);
  }, []);

  useEffect(() => {
    return () => {
      stopTuner();
    };
  }, [stopTuner]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—é–Ω–µ—Ä –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (hidden && !running) {
      console.log('üéπ PitchTrainerPitchy: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—é —Ç—é–Ω–µ—Ä –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ');
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      const timer = setTimeout(() => {
        startTuner();
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [hidden, running, startTuner]);

  // –ï—Å–ª–∏ —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É –±–µ–∑ UI
  if (hidden) {
    return null;
  }

  return (
    <div style={{ 
      padding: '20px', 
      maxWidth: '600px', 
      margin: '0 auto',
      fontFamily: 'Arial, sans-serif'
    }}>
      <h2 style={{ textAlign: 'center', marginBottom: '30px' }}>
        üéµ –¢—é–Ω–µ—Ä —Å Pitchy
      </h2>

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */}
      {expected && (
        <div style={{ 
          marginBottom: 20, 
          padding: 12, 
          backgroundColor: '#e3f2fd', 
          borderRadius: 8,
          textAlign: 'center'
        }}>
          <h3 style={{ margin: '0 0 8px 0', color: '#1976d2' }}>
            –í–∞—à–∞ –∑–∞–¥–∞—á–∞: —Å—ã–≥—Ä–∞—Ç—å –Ω–æ—Ç—É <strong>{expected}</strong>
          </h3>
          <p style={{ margin: 0, color: '#666', fontSize: '14px' }}>
            –°—ã–≥—Ä–∞–π—Ç–µ –Ω–æ—Ç—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
          </p>
        </div>
      )}

      {/* –†–µ–∂–∏–º—ã */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        gap: '10px', 
        marginBottom: '20px' 
      }}>
        <button
          onClick={() => setMode("guitar")}
          style={{
            padding: '10px 20px',
            backgroundColor: mode === "guitar" ? '#3498db' : '#ecf0f1',
            color: mode === "guitar" ? 'white' : '#2c3e50',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          üé∏ –ì–∏—Ç–∞—Ä–∞
        </button>
        <button
          onClick={() => setMode("piano")}
          style={{
            padding: '10px 20px',
            backgroundColor: mode === "piano" ? '#3498db' : '#ecf0f1',
            color: mode === "piano" ? 'white' : '#2c3e50',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          üéπ –ü–∏–∞–Ω–∏–Ω–æ
        </button>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ */}
      <div style={{ textAlign: 'center', marginBottom: '30px' }}>
        <button 
          onClick={running ? stopTuner : startTuner}
          style={{
            padding: '15px 30px',
            fontSize: '18px',
            backgroundColor: running ? '#e74c3c' : '#27ae60',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer'
          }}
        >
          {running ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å'}
        </button>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <div style={{ 
          padding: '15px', 
          backgroundColor: '#f8d7da', 
          color: '#721c24', 
          borderRadius: '5px',
          marginBottom: '20px'
        }}>
          {error}
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {running && (
        <div style={{ 
          padding: '20px', 
          backgroundColor: '#f8f9fa', 
          borderRadius: '10px',
          marginBottom: '20px'
        }}>
          <h3>–°—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ü–∏–∏:</h3>
          <p><strong>–ì—Ä–æ–º–∫–æ—Å—Ç—å:</strong> {volume.toFixed(1)}%</p>
          
          {freq && result ? (
            <div>
              <p><strong>–ß–∞—Å—Ç–æ—Ç–∞:</strong> {freq.toFixed(2)} Hz</p>
              <p><strong>–ù–æ—Ç–∞:</strong> {freqToNote(freq)}</p>
              <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> 
                <span style={{ 
                  color: isCorrect ? '#27ae60' : '#2c3e50',
                  fontWeight: isCorrect ? 'bold' : 'normal'
                }}>
                  {result}
                </span>
                {isCorrect && <span style={{ color: '#27ae60', marginLeft: '10px' }}>‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</span>}
              </p>
              {cents !== null && (
                <p><strong>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:</strong> 
                  <span style={{ 
                    color: Math.abs(cents) < 5 ? '#27ae60' : Math.abs(cents) < 20 ? '#f39c12' : '#e74c3c'
                  }}>
                    {cents > 0 ? '+' : ''}{cents.toFixed(1)} —Ü–µ–Ω—Ç–æ–≤
                  </span>
                </p>
              )}
            </div>
          ) : (
            <p>–û–∂–∏–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞...</p>
          )}
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div style={{ 
        padding: '20px', 
        backgroundColor: '#e8f4f8', 
        borderRadius: '10px'
      }}>
        <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
        <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong> Pitchy —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫</p>
        <p><strong>–†–µ–∂–∏–º:</strong> {mode === "guitar" ? "–ì–∏—Ç–∞—Ä–∞" : "–ü–∏–∞–Ω–∏–Ω–æ"}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {running ? "–†–∞–±–æ—Ç–∞–µ—Ç" : "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}</p>
      </div>
    </div>
  );
};

export default PitchTrainerPitchy;
