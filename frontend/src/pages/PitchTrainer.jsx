import { useRef, useState, useEffect } from "react";

// ===== –ù–æ—Ç—ã (–∫–∞–∫ —É —Ç–µ–±—è) =====
const NOTES = [
  { note: "C0", freq: 16.35 }, { note: "C#0/Db0", freq: 17.32 }, { note: "D0", freq: 18.35 },
  { note: "D#0/Eb0", freq: 19.45 }, { note: "E0", freq: 20.60 }, { note: "F0", freq: 21.83 },
  { note: "F#0/Gb0", freq: 23.12 }, { note: "G0", freq: 24.50 }, { note: "G#0/Ab0", freq: 25.96 },
  { note: "A0", freq: 27.50 }, { note: "A#0/Bb0", freq: 29.14 }, { note: "B0", freq: 30.87 },

  { note: "C1", freq: 32.70 }, { note: "C#1/Db1", freq: 34.65 }, { note: "D1", freq: 36.71 },
  { note: "D#1/Eb1", freq: 38.89 }, { note: "E1", freq: 41.20 }, { note: "F1", freq: 43.65 },
  { note: "F#1/Gb1", freq: 46.25 }, { note: "G1", freq: 49.00 }, { note: "G#1/Ab1", freq: 51.91 },
  { note: "A1", freq: 55.00 }, { note: "A#1/Bb1", freq: 58.27 }, { note: "B1", freq: 61.74 },

  { note: "C2", freq: 65.41 }, { note: "C#2/Db2", freq: 69.30 }, { note: "D2", freq: 73.42 },
  { note: "D#2/Eb2", freq: 77.78 }, { note: "E2", freq: 82.41 }, { note: "F2", freq: 87.31 },
  { note: "F#2/Gb2", freq: 92.50 }, { note: "G2", freq: 98.00 }, { note: "G#2/Ab2", freq: 103.83 },
  { note: "A2", freq: 110.00 }, { note: "A#2/Bb2", freq: 116.54 }, { note: "B2", freq: 123.47 },

  { note: "C3", freq: 130.81 }, { note: "C#3/Db3", freq: 138.59 }, { note: "D3", freq: 146.83 },
  { note: "D#3/Eb3", freq: 155.56 }, { note: "E3", freq: 164.81 }, { note: "F3", freq: 174.61 },
  { note: "F#3/Gb3", freq: 185.00 }, { note: "G3", freq: 196.00 }, { note: "G#3/Ab3", freq: 207.65 },
  { note: "A3", freq: 220.00 }, { note: "A#3/Bb3", freq: 233.08 }, { note: "B3", freq: 246.94 },

  { note: "C4 (Middle C)", freq: 261.63 }, { note: "C#4/Db4", freq: 277.18 }, { note: "D4", freq: 293.66 },
  { note: "D#4/Eb4", freq: 311.13 }, { note: "E4", freq: 329.63 }, { note: "F4", freq: 349.23 },
  { note: "F#4/Gb4", freq: 369.99 }, { note: "G4", freq: 392.00 }, { note: "G#4/Ab4", freq: 415.30 },
  { note: "A4 (Concert Pitch)", freq: 440.00 }, { note: "A#4/Bb4", freq: 466.16 }, { note: "B4", freq: 493.88 },

  { note: "C5", freq: 523.25 }, { note: "C#5/Db5", freq: 554.37 }, { note: "D5", freq: 587.33 },
  { note: "D#5/Eb5", freq: 622.25 }, { note: "E5", freq: 659.25 }, { note: "F5", freq: 698.46 },
  { note: "F#5/Gb5", freq: 739.99 }, { note: "G5", freq: 783.99 }, { note: "G#5/Ab5", freq: 830.61 },
  { note: "A5", freq: 880.00 }, { note: "A#5/Bb5", freq: 932.33 }, { note: "B5", freq: 987.77 },

  { note: "C6", freq: 1046.50 }, { note: "C#6/Db6", freq: 1108.73 }, { note: "D6", freq: 1174.66 },
  { note: "D#6/Eb6", freq: 1244.51 }, { note: "E6", freq: 1318.51 }, { note: "F6", freq: 1396.91 },
  { note: "F#6/Gb6", freq: 1479.98 }, { note: "G6", freq: 1567.98 }, { note: "G#6/Ab6", freq: 1661.22 },
  { note: "A6", freq: 1760.00 }, { note: "A#6/Bb6", freq: 1864.66 }, { note: "B6", freq: 1975.53 },

  { note: "C7", freq: 2093.00 }, { note: "C#7/Db7", freq: 2217.46 }, { note: "D7", freq: 2349.32 },
  { note: "D#7/Eb7", freq: 2489.02 }, { note: "E7", freq: 2637.02 }, { note: "F7", freq: 2793.83 },
  { note: "F#7/Gb7", freq: 2959.96 }, { note: "G7", freq: 3135.96 }, { note: "G#7/Ab7", freq: 3322.44 },
  { note: "A7", freq: 3520.00 }, { note: "A#7/Bb7", freq: 3729.31 }, { note: "B7", freq: 3951.07 },
];

// ===== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤ —Å –Ω–∞—É—á–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏–∑ Wikipedia Piano Key Frequencies =====
// –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ç–µ–º–ø–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å—Ç—Ä–æ–µ (A4 = 440Hz)
const CHORDS = {
  // –ú–∞–∂–æ—Ä–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ç–æ–Ω–∏–∫–∞ - –±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è - —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞)
  C: ["C", "E", "G"],       // C Major: C-E-G (261.6-329.6-392.0 Hz)
  D: ["D", "F#", "A"],      // D Major: D-F#-A (293.7-370.0-440.0 Hz)
  E: ["E", "G#", "B"],      // E Major: E-G#-B (329.6-415.3-493.9 Hz)
  F: ["F", "A", "C"],       // F Major: F-A-C (349.2-440.0-523.3 Hz)
  G: ["G", "B", "D"],       // G Major: G-B-D (392.0-493.9-587.3 Hz)
  A: ["A", "C#", "E"],      // A Major: A-C#-E (440.0-554.4-659.3 Hz)
  B: ["B", "D#", "F#"],     // B Major: B-D#-F# (493.9-622.3-740.0 Hz)
  
  // –ú–∏–Ω–æ—Ä–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ç–æ–Ω–∏–∫–∞ - –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è - —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞)
  Cm: ["C", "D#", "G"],     // C minor: C-Eb-G (261.6-311.1-392.0 Hz)
  Dm: ["D", "F", "A"],      // D minor: D-F-A (293.7-349.2-440.0 Hz)
  Em: ["E", "G", "B"],      // E minor: E-G-B (329.6-392.0-493.9 Hz) - –ò–°–ü–†–ê–í–õ–ï–ù–û!
  Fm: ["F", "G#", "C"],     // F minor: F-Ab-C (349.2-415.3-523.3 Hz)
  Gm: ["G", "A#", "D"],     // G minor: G-Bb-D (392.0-466.2-587.3 Hz)
  Am: ["A", "C", "E"],      // A minor: A-C-E (440.0-523.3-659.3 Hz)
  Bm: ["B", "D", "F#"],     // B minor: B-D-F# (493.9-587.3-740.0 Hz)
  
  // –î–∏–µ–∑–Ω—ã–µ –º–∞–∂–æ—Ä–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã
  "C#": ["C#", "F", "G#"],    // C# Major: C#-E#(F)-G# (277.2-349.2-415.3 Hz)
  "D#": ["D#", "G", "A#"],    // D# Major: D#-F##(G)-A# (311.1-392.0-466.2 Hz)
  "F#": ["F#", "A#", "C#"],   // F# Major: F#-A#-C# (370.0-466.2-554.4 Hz)
  "G#": ["G#", "C", "D#"],    // G# Major: G#-B#(C)-D# (415.3-523.3-622.3 Hz)
  "A#": ["A#", "D", "F"],     // A# Major: A#-C##(D)-E#(F) (466.2-587.3-698.5 Hz)
  
  // –î–∏–µ–∑–Ω—ã–µ –º–∏–Ω–æ—Ä–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã
  "C#m": ["C#", "E", "G#"],   // C# minor: C#-E-G# (277.2-329.6-415.3 Hz)
  "D#m": ["D#", "F#", "A#"],  // D# minor: D#-F#-A# (311.1-370.0-466.2 Hz)
  "F#m": ["F#", "A", "C#"],   // F# minor: F#-A-C# (370.0-440.0-554.4 Hz)
  "G#m": ["G#", "B", "D#"],   // G# minor: G#-B-D# (415.3-493.9-622.3 Hz)
  "A#m": ["A#", "C#", "F"],   // A# minor: A#-C#-E#(F) (466.2-554.4-698.5 Hz)
  
  // –ë–µ–º–æ–ª—å–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã (—ç–Ω–≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã)
  "Db": ["C#", "F", "G#"],    // Db Major = C# Major
  "Eb": ["D#", "G", "A#"],    // Eb Major = D# Major
  "Gb": ["F#", "A#", "C#"],   // Gb Major = F# Major
  "Ab": ["G#", "C", "D#"],    // Ab Major = G# Major
  "Bb": ["A#", "D", "F"],     // Bb Major = A# Major
  
  "Dbm": ["C#", "E", "G#"],   // Db minor = C# minor
  "Ebm": ["D#", "F#", "A#"],  // Eb minor = D# minor
  "Gbm": ["F#", "A", "C#"],   // Gb minor = F# minor
  "Abm": ["G#", "B", "D#"],   // Ab minor = G# minor
  "Bbm": ["A#", "C#", "F"],   // Bb minor = A# minor
};

// ===== –£—Ç–∏–ª–∏—Ç—ã =====
function findClosestNote(freq) {
  let closest = NOTES[0], diff = Math.abs(freq - closest.freq);
  for (const n of NOTES) {
    const d = Math.abs(freq - n.freq);
    if (d < diff) { closest = n; diff = d; }
  }
  return closest;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–µ—Ä—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–æ—Ç–∞–º–∏
function getThirdType(rootNote, thirdNote, detectedFreqs) {
  // –ù–∞—Ö–æ–¥–∏–º –í–°–ï —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ—Ç (–≤–∫–ª—é—á–∞—è –æ–∫—Ç–∞–≤—ã)
  const rootFreqs = detectedFreqs.filter(f => 
    normalizePitchClass(findClosestNote(f.freq).note) === rootNote
  );
  
  const thirdFreqs = detectedFreqs.filter(f => 
    normalizePitchClass(findClosestNote(f.freq).note) === thirdNote
  );
  
  if (rootFreqs.length === 0 || thirdFreqs.length === 0) return null;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –æ–∫—Ç–∞–≤
  let bestRatio = null;
  let bestConfidence = 0;
  
  for (const rootFreq of rootFreqs) {
    for (const thirdFreq of thirdFreqs) {
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–π –æ–∫—Ç–∞–≤–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      let normalizedThird = thirdFreq.freq;
      while (normalizedThird < rootFreq.freq) normalizedThird *= 2;
      while (normalizedThird > rootFreq.freq * 2) normalizedThird /= 2;
      
      const ratio = normalizedThird / rootFreq.freq;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏:
      // –ë–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è ‚âà 1.260 (2^(4/12))
      // –ú–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è ‚âà 1.189 (2^(3/12))
      const majorThirdRatio = Math.pow(2, 4/12); // 1.2599
      const minorThirdRatio = Math.pow(2, 3/12); // 1.1892
      
      const majorDiff = Math.abs(ratio - majorThirdRatio);
      const minorDiff = Math.abs(ratio - minorThirdRatio);
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –≤ –æ—Ü–µ–Ω–∫–µ
      const combinedAmplitude = (rootFreq.amp + thirdFreq.amp) / 2;
      
      if (majorDiff < 0.025) { // –û—Å–ª–∞–±–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π —Å 0.015 –¥–æ 0.025
        const confidence = combinedAmplitude * (1 - majorDiff * 30); // –£–º–µ–Ω—å—à–∞–µ–º —à—Ç—Ä–∞—Ñ
        if (confidence > bestConfidence) {
          bestRatio = 'major';
          bestConfidence = confidence;
        }
      }
      
      if (minorDiff < 0.025) { // –û—Å–ª–∞–±–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π —Å 0.015 –¥–æ 0.025
        const confidence = combinedAmplitude * (1 - minorDiff * 30); // –£–º–µ–Ω—å—à–∞–µ–º —à—Ç—Ä–∞—Ñ
        if (confidence > bestConfidence) {
          bestRatio = 'minor';
          bestConfidence = confidence;
        }
      }
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –±–æ–ª–µ–µ –º—è–≥–∫–æ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  return bestConfidence > 10 ? bestRatio : null; // –°–Ω–∏–∂–∞–µ–º —Å 20 –¥–æ 10
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–æ—Ç –∞–∫–∫–æ—Ä–¥–∞
function validateCompleteChord(chordName, requiredNotes, detectedNotes, fundamentalPeaks) {
  const root = chordName.replace('m', '').replace('#', '').replace('b', '');
  const isMinor = chordName.includes('m') && !chordName.includes('#');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–∑–≤—É—á–∏—è
  const hasRoot = detectedNotes.includes(root);
  const hasThird = detectedNotes.includes(requiredNotes[1]);
  const hasFifth = requiredNotes.length > 2 ? detectedNotes.includes(requiredNotes[2]) : true;
  
  console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è ${chordName}: –∫–æ—Ä–µ–Ω—å=${hasRoot}, —Ç–µ—Ä—Ü–∏—è=${hasThird}, –∫–≤–∏–Ω—Ç–∞=${hasFifth}`);
  
  // –û–°–õ–ê–ë–õ–ï–ù–ù–´–ï –ö–†–ò–¢–ï–†–ò–ò: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–Ω—è –ò–õ–ò —Ç–µ—Ä—Ü–∏–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  if (!hasRoot && !hasThird) {
    console.log(`‚ùå ${chordName}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã`);
    return { isValid: false, confidence: 0 };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Ä—Ü–∏–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞
  let thirdValidation = true;
  if (hasThird && hasRoot) {
    const thirdType = getThirdType(root, requiredNotes[1], fundamentalPeaks);
    const expectedThirdType = isMinor ? 'minor' : 'major';
    
    if (thirdType && thirdType !== expectedThirdType) {
      console.log(`‚ö†Ô∏è ${chordName}: –Ω–µ–∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø —Ç–µ—Ä—Ü–∏–∏ (–æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedThirdType}, –Ω–∞–π–¥–µ–Ω–æ ${thirdType})`);
      thirdValidation = false; // –ù–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º, –Ω–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    }
  }
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –∞–∫–∫–æ—Ä–¥–∞
  let confidence = 40; // –°–Ω–∏–∂–∞–µ–º –±–∞–∑–æ–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  
  if (hasRoot) confidence += 25;
  if (hasThird) confidence += 25;
  if (hasFifth) confidence += 10;
  
  // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–µ—Ä—Ü–∏—é
  if (thirdValidation) confidence += 20;
  else confidence -= 10; // –ú—è–≥–∫–∏–π —à—Ç—Ä–∞—Ñ –≤–º–µ—Å—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  
  console.log(`‚úÖ ${chordName}: –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ${confidence}%`);
  return { isValid: true, confidence };
}

function normalizePitchClass(label) {
  // "C#4/Db4" -> "C#" ; "A#4/Bb4" -> "A#" ; "C4 (Middle C)" -> "C"
  let core = label.split(" ")[0];        // —É–±–∏—Ä–∞–µ–º " (Middle C)"
  core = core.split("/")[0];             // –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ '/'
  core = core.replace(/[0-9]/g, "");     // —É–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –æ–∫—Ç–∞–≤—ã
  // –ø—Ä–∏–≤–æ–¥–∏–º –±–µ–º–æ–ª–∏ –∫ –¥–∏–µ–∑–∞–º
  return core
    .replace("Db", "C#")
    .replace("Eb", "D#")
    .replace("Gb", "F#")
    .replace("Ab", "G#")
    .replace("Bb", "A#");
}

function removeDC(buf) {
  let sum = 0;
  for (let i = 0; i < buf.length; i++) sum += buf[i];
  const mean = sum / buf.length;
  for (let i = 0; i < buf.length; i++) buf[i] -= mean;
}

function hannWindow(buf) {
  const N = buf.length;
  for (let i = 0; i < N; i++) {
    const w = 0.5 * (1 - Math.cos((2 * Math.PI * i) / (N - 1)));
    buf[i] *= w;
  }
}

// ===== –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏–∫ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –≥–∏—Ç–∞—Ä—ã =====
function suppressHarmonics(peaks) {
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
  const sorted = [...peaks].sort((a, b) => a.freq - b.freq);
  const fundamental = [];
  
  // –û—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –≥–∏—Ç–∞—Ä—ã - –æ–Ω–∏ –º–æ–≥—É—Ç –∑–≤—É—á–∞—Ç—å –∫–∞–∫ –±–∞—Å–æ–≤—ã–µ —á–∞—Å—Ç–æ—Ç—ã
  const guitarOpenStrings = [82.41, 110.00, 146.83, 196.00, 246.94, 329.63]; // E A D G B E
  
  for (const peak of sorted) {
    let isHarmonic = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —á–∞—Å—Ç–æ—Ç–∞ –≥–∞—Ä–º–æ–Ω–∏–∫–æ–π —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π
    for (const fund of fundamental) {
      const ratio = peak.freq / fund.freq;
      // –î–ª—è –≥–∏—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≥–∞—Ä–º–æ–Ω–∏–∫
      if (Math.abs(ratio - Math.round(ratio)) < 0.08 && Math.round(ratio) >= 2 && Math.round(ratio) <= 6) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∏–ª—å–Ω—ã–µ –≥–∞—Ä–º–æ–Ω–∏–∫–∏ (2—è, 3—è) –ø–æ–¥–∞–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∂–µ
        if (Math.round(ratio) <= 3 && Math.abs(ratio - Math.round(ratio)) < 0.05) {
          isHarmonic = true;
          break;
        } else if (Math.round(ratio) > 3 && Math.abs(ratio - Math.round(ratio)) < 0.08) {
          isHarmonic = true;
          break;
        }
      }
    }
    
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω –≥–∏—Ç–∞—Ä—ã - –æ–Ω–∏ –≤–∞–∂–Ω—ã –¥–ª—è –∞–∫–∫–æ—Ä–¥–æ–≤
    const isOpenString = guitarOpenStrings.some(openFreq => 
      Math.abs(peak.freq - openFreq) < 3.0 // –ù–µ–±–æ–ª—å—à–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å—Å—Ç—Ä–æ–π–∫–∏
    );
    
    if (!isHarmonic || isOpenString) {
      fundamental.push(peak);
      // –î–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ –∞–º–ø–ª–∏—Ç—É–¥–µ
      if (isOpenString) {
        peak.amp *= 1.2;
        console.log(`üé∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞: ${peak.freq.toFixed(1)}Hz`);
      }
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç –¥–ª—è –≥–∏—Ç–∞—Ä—ã (–±–æ–ª—å—à–µ —á–µ–º –¥–ª—è –ø–∏–∞–Ω–∏–Ω–æ)
  return fundamental.sort((a, b) => b.amp - a.amp).slice(0, 10);
}

// ===== –£—Å–∏–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∞–∫–∫–æ—Ä–¥–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –≤—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ =====
function lockChordOnConfidentDetection(detectedChord, confidence, setLockedChord, setLockTimestamp, lockReleaseTimerRef) {
  const LOCK_CONFIDENCE_THRESHOLD = 75; // –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 75%
  const HIGH_CONFIDENCE_THRESHOLD = 91; // –ü–æ—Ä–æ–≥ –¥–ª—è –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  let lockDuration;
  let lockType;
  
  if (confidence >= HIGH_CONFIDENCE_THRESHOLD) {
    lockDuration = 4000; // 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –≤—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    lockType = 'HIGH_CONFIDENCE';
  } else if (confidence >= 85) {
    lockDuration = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    lockType = 'GOOD_CONFIDENCE';
  } else {
    lockDuration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    lockType = 'BASIC_CONFIDENCE';
  }
  
  const now = Date.now();
  
  // –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–∫–∫–æ—Ä–¥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  if (confidence >= LOCK_CONFIDENCE_THRESHOLD) {
    console.log(`üîí –ë–õ–û–ö–ò–†–û–í–ö–ê –∞–∫–∫–æ—Ä–¥–∞ ${detectedChord.name} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ${confidence}% –Ω–∞ ${lockDuration}–º—Å (—Ç–∏–ø: ${lockType})`);
    
    setLockedChord({
      name: detectedChord.name,
      confidence: confidence,
      lockTime: now,
      lockType: lockType,
      originalConfidence: confidence // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    });
    setLockTimestamp(now);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (lockReleaseTimerRef.current) {
      clearTimeout(lockReleaseTimerRef.current);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const timer = setTimeout(() => {
      console.log(`üîì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–æ—Ä–¥–∞ (${lockType})`);
      setLockedChord(null);
      setLockTimestamp(0);
      lockReleaseTimerRef.current = null;
    }, lockDuration);
    
    lockReleaseTimerRef.current = timer;
    
    return true; // –ê–∫–∫–æ—Ä–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
  }
  
  return false; // –ê–∫–∫–æ—Ä–¥ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–æ—Ä–¥ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
function isChordLocked(lockedChord, lockTimestamp) {
  if (!lockedChord || !lockTimestamp) return false;
  
  const now = Date.now();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  let lockDuration;
  if (lockedChord.lockType === 'HIGH_CONFIDENCE') {
    lockDuration = 4000; // 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –≤—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  } else if (lockedChord.lockType === 'GOOD_CONFIDENCE') {
    lockDuration = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  } else {
    lockDuration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  }
  
  return (now - lockTimestamp) < lockDuration;
}

// ===== –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–æ—Ä–¥–æ–≤ —Å —É—á–µ—Ç–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ =====
function stabilizeChord(candidateChord, chordHistoryRef, stableChordRef, lockedChord, lockTimestamp, setLockedChord, setLockTimestamp, lockReleaseTimerRef) {
  const now = Date.now();
  const STABILITY_TIME = 250; // –ê–∫–∫–æ—Ä–¥ –¥–æ–ª–∂–µ–Ω –¥–µ—Ä–∂–∞—Ç—å—Å—è 250–º—Å
  const HISTORY_SIZE = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è —É—á–µ—Ç–∞
  
  // –ü–†–ò–û–†–ò–¢–ï–¢: –µ—Å–ª–∏ –∞–∫–∫–æ—Ä–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (isChordLocked(lockedChord, lockTimestamp)) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    let lockDuration;
    if (lockedChord.lockType === 'HIGH_CONFIDENCE') {
      lockDuration = 4000;
    } else if (lockedChord.lockType === 'GOOD_CONFIDENCE') {
      lockDuration = 3000;
    } else {
      lockDuration = 2000;
    }
    
    const timeLeft = lockDuration - (now - lockTimestamp);
    const lockIcon = lockedChord.lockType === 'HIGH_CONFIDENCE' ? 'üîê' : 'üîí';
    
    console.log(`${lockIcon} –ê–∫–∫–æ—Ä–¥ ${lockedChord.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (${lockedChord.lockType}, –æ—Å—Ç–∞–ª–æ—Å—å ${timeLeft}–º—Å)`);
    
    return {
      name: lockedChord.name,
      confidence: lockedChord.originalConfidence, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      isLocked: true,
      lockType: lockedChord.lockType
    };
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
  chordHistoryRef.current.push({
    chord: candidateChord,
    timestamp: now
  });
  
  // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã)
  chordHistoryRef.current = chordHistoryRef.current.filter(
    entry => now - entry.timestamp < 1000
  );
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
  if (chordHistoryRef.current.length > HISTORY_SIZE * 2) {
    chordHistoryRef.current = chordHistoryRef.current.slice(-HISTORY_SIZE);
  }
  
  if (!candidateChord) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∞–∫–∫–æ—Ä–¥
    if (stableChordRef.current && 
        chordHistoryRef.current.filter(e => e.chord?.name === stableChordRef.current.name).length === 0) {
      // –ï—Å–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ –Ω–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—è—Ö, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
      stableChordRef.current = null;
    }
    return stableChordRef.current;
  }
  
  // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —ç—Ç–æ—Ç –∞–∫–∫–æ—Ä–¥ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ –Ω–µ–¥–∞–≤–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
  const recentMatches = chordHistoryRef.current.filter(
    entry => entry.chord?.name === candidateChord.name && 
             now - entry.timestamp <= STABILITY_TIME
  );
  
  // –ï—Å–ª–∏ –∞–∫–∫–æ—Ä–¥ —Å—Ç–∞–±–∏–ª—å–Ω–æ –¥–µ—Ä–∂–∏—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
  if (recentMatches.length >= 2) {
    stableChordRef.current = candidateChord;
    console.log(`‚úÖ –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${candidateChord.name} (${recentMatches.length} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)`);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–æ—Ä–¥ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∑–∞—â–∏—Ç—ã
    if (candidateChord.confidence >= 75) { // –ü–æ–Ω–∏–∂–∞–µ–º –æ–±—â–∏–π –ø–æ—Ä–æ–≥ –¥–æ 75%
      lockChordOnConfidentDetection(
        candidateChord, 
        candidateChord.confidence,
        setLockedChord,
        setLockTimestamp, 
        lockReleaseTimerRef
      );
    }
    
    return {
      name: candidateChord.name,
      confidence: candidateChord.confidence,
      isStable: true
    };
  }
  
  return stableChordRef.current;
}

// ===== –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∏—Ç–∞—Ä–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤ =====
function calculateGuitarChordBonus(chordName, requiredNotes, detectedNotes, fundamentalPeaks) {
  let bonus = 0;
  
  // –û—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –≥–∏—Ç–∞—Ä—ã
  const openStrings = {
    'E': [82.41, 329.63], // 6-—è –∏ 1-—è —Å—Ç—Ä—É–Ω—ã
    'A': [110.00],        // 5-—è —Å—Ç—Ä—É–Ω–∞  
    'D': [146.83],        // 4-—è —Å—Ç—Ä—É–Ω–∞
    'G': [196.00],        // 3-—è —Å—Ç—Ä—É–Ω–∞
    'B': [246.94]         // 2-—è —Å—Ç—Ä—É–Ω–∞
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
  for (const note of requiredNotes) {
    if (openStrings[note]) {
      for (const openFreq of openStrings[note]) {
        const foundOpen = fundamentalPeaks.some(peak => 
          Math.abs(peak.freq - openFreq) < 3.0 && peak.amp > 20
        );
        if (foundOpen) {
          bonus += 30; // –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã
          console.log(`üé∏ –ë–æ–Ω—É—Å –∑–∞ –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä—É–Ω—É ${note}: +30`);
        }
      }
    }
  }
  
  // –ë–æ–Ω—É—Å –∑–∞ –±–∞—Å–æ–≤—ã–µ –Ω–æ—Ç—ã (–∫–æ—Ä–µ–Ω—å –∞–∫–∫–æ—Ä–¥–∞ –≤ –Ω–∏–∑–∫–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
  const root = chordName.replace('m', '').replace('#', '').replace('b', '');
  const bassNote = detectedNotes.find(n => 
    n.note === root && n.freq < 150 && n.amp > 15
  );
  
  if (bassNote) {
    bonus += 25;
    console.log(`üé∏ –ë–æ–Ω—É—Å –∑–∞ –±–∞—Å–æ–≤—É—é –Ω–æ—Ç—É ${root}: +25`);
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–∏—Ç–∞—Ä–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤
  const guitarChordPatterns = {
    'E': ['E', 'G#', 'B'], // –û—Ç–∫—Ä—ã—Ç—ã–π E –º–∞–∂–æ—Ä
    'A': ['A', 'C#', 'E'], // –û—Ç–∫—Ä—ã—Ç—ã–π A –º–∞–∂–æ—Ä  
    'D': ['D', 'F#', 'A'], // –û—Ç–∫—Ä—ã—Ç—ã–π D –º–∞–∂–æ—Ä
    'G': ['G', 'B', 'D'],  // –û—Ç–∫—Ä—ã—Ç—ã–π G –º–∞–∂–æ—Ä
    'C': ['C', 'E', 'G'],  // –û—Ç–∫—Ä—ã—Ç—ã–π C –º–∞–∂–æ—Ä
    'Em': ['E', 'G', 'B'], // –û—Ç–∫—Ä—ã—Ç—ã–π Em
    'Am': ['A', 'C', 'E'], // –û—Ç–∫—Ä—ã—Ç—ã–π Am
    'Dm': ['D', 'F', 'A']  // –û—Ç–∫—Ä—ã—Ç—ã–π Dm
  };
  
  if (guitarChordPatterns[chordName]) {
    const pattern = guitarChordPatterns[chordName];
    const patternMatches = pattern.filter(note => 
      detectedNotes.some(d => d.note === note)
    );
    
    if (patternMatches.length === pattern.length) {
      bonus += 40; // –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
      console.log(`üé∏ –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω—ã–π –≥–∏—Ç–∞—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω ${chordName}: +40`);
    }
  }
  
  return bonus;
}

// ===== –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –∞–∫–∫–æ—Ä–¥–æ–≤ —Å –º—è–≥–∫–∏–º –º–∞—Ç—á–µ–º –∏ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫ =====
function yinPitch(buf, sampleRate, minFreq = 70, maxFreq = 1200, threshold = 0.1) {
  const tauMin = Math.floor(sampleRate / maxFreq);
  const tauMax = Math.floor(sampleRate / minFreq);
  const yin = new Float32Array(tauMax + 1);

  for (let tau = 1; tau <= tauMax; tau++) {
    let sum = 0;
    for (let i = 0; i < buf.length - tau; i++) {
      const d = buf[i] - buf[i + tau];
      sum += d * d;
    }
    yin[tau] = sum;
  }

  let running = 0;
  yin[0] = 1;
  for (let tau = 1; tau <= tauMax; tau++) {
    running += yin[tau];
    yin[tau] = (yin[tau] * tau) / (running || 1e-12);
  }

  let tauEst = -1;
  for (let tau = tauMin; tau <= tauMax; tau++) {
    if (yin[tau] < threshold) {
      while (tau + 1 <= tauMax && yin[tau + 1] < yin[tau]) tau++;
      tauEst = tau;
      break;
    }
  }
  if (tauEst <= 0) return -1;

  const x0 = tauEst - 1 >= 1 ? tauEst - 1 : tauEst;
  const x2 = tauEst + 1 <= tauMax ? tauEst + 1 : tauEst;
  const s0 = yin[x0], s1 = yin[tauEst], s2 = yin[x2];
  let betterTau = tauEst;
  const denom = (s2 + s0 - 2 * s1);
  if (denom !== 0) betterTau = tauEst + (s2 - s0) / (2 * denom);

  const f = sampleRate / betterTau;
  return (f < minFreq || f > maxFreq) ? -1 : f;
}

// ===== –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –∞–∫–∫–æ—Ä–¥–æ–≤ —Å –º—è–≥–∫–∏–º –º–∞—Ç—á–µ–º –∏ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫ =====
function detectChord(freqBuf, sampleRate, setDetectedNotes, setChordConfidence, lockedChord, lockTimestamp, setLockedChord, setLockTimestamp, lockReleaseTimerRef) {
  // –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥ —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
  if (lockedChord && isChordLocked(lockedChord, lockTimestamp) && lockedChord.originalConfidence >= 91) {
    console.log(`üõ°Ô∏è –ó–ê–©–ò–¢–ê: ${lockedChord.name} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ${lockedChord.originalConfidence}%, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑`);
    return {
      name: lockedChord.name,
      confidence: lockedChord.originalConfidence,
      isLocked: true,
      lockType: lockedChord.lockType
    };
  }
  
  const peaks = [];
  
  // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∏–∫–æ–≤
  for (let i = 5; i < freqBuf.length - 5; i++) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–∞—é—â–∏–π—Å—è –ø–∏–∫
    const isStrongPeak = freqBuf[i] > freqBuf[i-1] && freqBuf[i] > freqBuf[i+1] && 
                        freqBuf[i] > freqBuf[i-2] && freqBuf[i] > freqBuf[i+2] &&
                        freqBuf[i] > freqBuf[i-3] && freqBuf[i] > freqBuf[i+3];
    
    if (isStrongPeak && freqBuf[i] > -60) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ -60–¥–ë –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—å–∫–æ –≥—Ä–æ–º–∫–∏—Ö –∑–≤—É–∫–æ–≤
      const freq = (i * sampleRate) / (freqBuf.length * 2);
      if (freq > 80 && freq < 1000) { // –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        peaks.push({ freq, amp: freqBuf[i] });
      }
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–º–ø–ª–∏—Ç—É–¥–µ –∏ –±–µ—Ä–µ–º —Å–∏–ª—å–Ω—ã–µ –ø–∏–∫–∏
  peaks.sort((a, b) => b.amp - a.amp);
  const strongPeaks = peaks.slice(0, 20).filter(p => p.amp > -55); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ -55–¥–ë –¥–ª—è –≥—Ä–æ–º–∫–∏—Ö –∑–≤—É–∫–æ–≤
  
  // –ü–æ–¥–∞–≤–ª—è–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
  const fundamentalPeaks = suppressHarmonics(strongPeaks);
  
  console.log(`–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–∏–∫–æ–≤: ${peaks.length}, –°–∏–ª—å–Ω—ã—Ö: ${strongPeaks.length}, –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö: ${fundamentalPeaks.length}`);
  
  const strong = fundamentalPeaks.map(p => ({
    note: normalizePitchClass(findClosestNote(p.freq).note),
    amp: p.amp,
    freq: p.freq
  }));

  const names = [...new Set(strong.map(n => n.note))];
  console.log("üéµ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–æ—Ç—ã:", names);
  console.log("üìä –î–µ—Ç–∞–ª–∏ —á–∞—Å—Ç–æ—Ç:", strong.map(s => `${s.note}=${s.freq.toFixed(1)}Hz`).join(', '));
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ—Ç—ã –≤ UI
  if (setDetectedNotes) {
    setDetectedNotes(names.slice(0, 6));
  }

  let bestChord = null;
  let bestScore = 0;
  let bestMatches = [];
  let bestGuitarBonus = 0;

  for (const [chord, requiredNotes] of Object.entries(CHORDS)) {
    const matches = requiredNotes.filter(n => names.includes(n));
    
    // –£–°–ò–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç—Ä–µ–±—É–µ–º –∫–æ—Ä–µ–Ω—å + —Ç–µ—Ä—Ü–∏—é + –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–æ—Å—Ç–∞–≤–∞
    if (matches.length >= 2) {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∞–∫–∫–æ—Ä–¥–∞
      const validation = validateCompleteChord(chord, requiredNotes, names, fundamentalPeaks);
      
      if (!validation.isValid) {
        console.log(`‚ùå –ê–∫–∫–æ—Ä–¥ ${chord} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã
      }
      
      // –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      let matchScore = validation.confidence * 2; // –£–¥–≤–∞–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      
      // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –ì–ò–¢–ê–†–´
      const guitarBonus = calculateGuitarChordBonus(chord, requiredNotes, strong, fundamentalPeaks);
      matchScore += guitarBonus;
      
      const root = chord.replace('m', '').replace('#', '').replace('b', '');
      const isMinorChord = chord.includes('m') && !chord.includes('#');
      const expectedThird = requiredNotes[1]; // –í—Ç–æ—Ä–∞—è –Ω–æ—Ç–∞ - —Ç–µ—Ä—Ü–∏—è
      
      // –î–í–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê —Ç–µ—Ä—Ü–∏–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
      if (names.includes(root) && names.includes(expectedThird)) {
        const thirdType = getThirdType(root, expectedThird, fundamentalPeaks);
        
        console.log(`üéµ –ê–Ω–∞–ª–∏–∑ ${chord}: –∫–æ—Ä–µ–Ω—å=${root}, —Ç–µ—Ä—Ü–∏—è=${expectedThird}, —Ç–∏–ø —Ç–µ—Ä—Ü–∏–∏=${thirdType}`);
        
        if (isMinorChord) {
          // –î–ª—è –º–∏–Ω–æ—Ä–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤ —Ç—Ä–µ–±—É–µ–º –º–∞–ª—É—é —Ç–µ—Ä—Ü–∏—é
          if (thirdType === 'minor') {
            matchScore += 150; // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–∏–Ω–æ—Ä–Ω—É—é —Ç–µ—Ä—Ü–∏—é
            console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ ${chord} —Å –º–∞–ª–æ–π —Ç–µ—Ä—Ü–∏–µ–π`);
          } else if (thirdType === 'major') {
            matchScore -= 50; // –£–º–µ–Ω—å—à–∞–µ–º —à—Ç—Ä–∞—Ñ —Å–æ 150 –¥–æ 50
            console.log(`‚ö†Ô∏è ${chord}: –Ω–∞–π–¥–µ–Ω–∞ –±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è –≤–º–µ—Å—Ç–æ –º–∞–ª–æ–π`);
          }
        } else {
          // –î–ª—è –º–∞–∂–æ—Ä–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤ —Ç—Ä–µ–±—É–µ–º –±–æ–ª—å—à—É—é —Ç–µ—Ä—Ü–∏—é
          if (thirdType === 'major') {
            matchScore += 120; // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–∞–∂–æ—Ä–Ω—É—é —Ç–µ—Ä—Ü–∏—é
            console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ ${chord} —Å –±–æ–ª—å—à–æ–π —Ç–µ—Ä—Ü–∏–µ–π`);
          } else if (thirdType === 'minor') {
            matchScore -= 50; // –£–º–µ–Ω—å—à–∞–µ–º —à—Ç—Ä–∞—Ñ —Å–æ 150 –¥–æ 50
            console.log(`‚ö†Ô∏è ${chord}: –Ω–∞–π–¥–µ–Ω–∞ –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è –≤–º–µ—Å—Ç–æ –±–æ–ª—å—à–æ–π`);
          }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –º–∞–∂–æ—Ä–Ω–∞—è –∏ –º–∏–Ω–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–Ω—è
        const conflictingChord = isMinorChord ? root : root + 'm';
        if (CHORDS[conflictingChord] && thirdType) {
          const conflictMatches = CHORDS[conflictingChord].filter(n => names.includes(n));
          if (conflictMatches.length >= 2) {
            const conflictThirdType = getThirdType(root, CHORDS[conflictingChord][1], fundamentalPeaks);
            
            // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –∞–∫–∫–æ—Ä–¥ –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ—Ä—Ü–∏—é, —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç
            if ((isMinorChord && conflictThirdType === 'major') || 
                (!isMinorChord && conflictThirdType === 'minor')) {
              matchScore -= 80;
              console.log(`‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç: ${conflictingChord} –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º`);
            }
          }
        }
      }
      
      // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (3 –∏–∑ 3 –Ω–æ—Ç)
      if (matches.length === requiredNotes.length) {
        matchScore += 75; // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      }
      
      // –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –Ω–æ—Ç
      const amplitudeBonus = strong
        .filter(n => matches.includes(n.note))
        .reduce((sum, n) => sum + Math.abs(n.amp) * 3, 0); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –∞–º–ø–ª–∏—Ç—É–¥—ã
      
      // –®—Ç—Ä–∞—Ñ –∑–∞ –ª–∏—à–Ω–∏–µ –Ω–æ—Ç—ã (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π)
      const extraNotesPenalty = Math.max(0, (names.length - requiredNotes.length) * 5); // –£–º–µ–Ω—å—à–∞–µ–º —à—Ç—Ä–∞—Ñ
      
      const totalScore = matchScore + amplitudeBonus - extraNotesPenalty;
      
      console.log(`üéº –ö–∞–Ω–¥–∏–¥–∞—Ç –∞–∫–∫–æ—Ä–¥–∞: ${chord} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${matches.length}/${requiredNotes.length}, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: ${totalScore.toFixed(1)})`);
      console.log(`   –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–æ—Ç—ã: [${requiredNotes.join(', ')}]`);
      console.log(`   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ—Ç—ã: [${matches.join(', ')}]`);
      
      if (totalScore > bestScore) {
        bestScore = totalScore;
        bestChord = chord;
        bestMatches = matches;
        bestGuitarBonus = guitarBonus; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏—Ç–∞—Ä–Ω—ã–π –±–æ–Ω—É—Å
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–∏–π –∏ –Ω–µ—Ç –±–ª–∏–∑–∫–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  if (bestChord && bestScore > 150) { // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —Å 300 –¥–æ 150
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –∞–∫–∫–æ—Ä–¥ —Å –ø–æ—Ö–æ–∂–∏–º —Å—á–µ—Ç–æ–º
    const root = bestChord.replace('m', '').replace('#', '').replace('b', '');
    const isMinor = bestChord.includes('m') && !bestChord.includes('#');
    const conflictingChord = isMinor ? root : root + 'm';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–µ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
    if (CHORDS[conflictingChord]) {
      const conflictMatches = CHORDS[conflictingChord].filter(n => names.includes(n));
      if (conflictMatches.length >= 2) {
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–µ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ —Å —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–æ–π
        let conflictScore = conflictMatches.length * 100;
        const conflictThird = CHORDS[conflictingChord][1];
        
        if (names.includes(root) && names.includes(conflictThird)) {
          const conflictThirdType = getThirdType(root, conflictThird, fundamentalPeaks);
          
          if (!isMinor && conflictThirdType === 'minor') {
            conflictScore += 150; // –ë–æ–Ω—É—Å –º–∏–Ω–æ—Ä–Ω–æ–º—É, –µ—Å–ª–∏ —Ç–µ—Ä—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∏–Ω–æ—Ä–Ω–∞—è
          } else if (isMinor && conflictThirdType === 'major') {
            conflictScore += 120; // –ë–æ–Ω—É—Å –º–∞–∂–æ—Ä–Ω–æ–º—É, –µ—Å–ª–∏ —Ç–µ—Ä—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞–∂–æ—Ä–Ω–∞—è
          }
        }
        
        // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –∞–∫–∫–æ—Ä–¥ –∏–º–µ–µ—Ç –±–ª–∏–∑–∫–∏–π –∏–ª–∏ –ª—É—á—à–∏–π —Å—á–µ—Ç, –ø—Ä–æ–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if (conflictScore > bestScore * 0.7) {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∫–æ–π –∞–∫–∫–æ—Ä–¥ –∏–º–µ–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Ä—Ü–∏–∏
          const bestValidation = validateCompleteChord(bestChord, CHORDS[bestChord], names, fundamentalPeaks);
          const conflictValidation = validateCompleteChord(conflictingChord, CHORDS[conflictingChord], names, fundamentalPeaks);
          
          console.log(`üîç –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É ${bestChord} (–≤–∞–ª–∏–¥–∞—Ü–∏—è: ${bestValidation.confidence}%) –∏ ${conflictingChord} (–≤–∞–ª–∏–¥–∞—Ü–∏—è: ${conflictValidation.confidence}%)`);
          
          // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –∞–∫–∫–æ—Ä–¥ –∏–º–µ–µ—Ç –ª—É—á—à—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
          if (conflictValidation.isValid && conflictValidation.confidence > bestValidation.confidence + 10) {
            console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å ${bestChord} –Ω–∞ ${conflictingChord} –∏–∑-–∑–∞ –ª—É—á—à–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏`);
            bestChord = conflictingChord;
            bestScore = conflictScore;
            bestMatches = conflictMatches;
          } else if (!conflictValidation.isValid || bestValidation.confidence > conflictValidation.confidence + 5) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ª—É—á—à–∏–π –≤—ã–±–æ—Ä, –Ω–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –±–ª–∏–∑–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
            bestScore = Math.max(bestScore - 30, 150);
            console.log(`‚ö†Ô∏è –°–Ω–∏–∂–µ–Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è ${bestChord} –∏–∑-–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ —Å ${conflictingChord}`);
          }
        }
      }
    }
    
    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–û–†–ú–£–õ–ê –£–í–ï–†–ï–ù–ù–û–°–¢–ò –î–õ–Ø –ì–ò–¢–ê–†–´
    let confidence;
    
    if (bestScore >= 400) {
      // –í—ã—Å–æ–∫–∏–π —Å—á–µ—Ç - –æ—Ç–ª–∏—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      confidence = Math.min(95, 80 + Math.round((bestScore - 400) / 20));
    } else if (bestScore >= 300) {
      // –•–æ—Ä–æ—à–∏–π —Å—á–µ—Ç - —Ö–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å  
      confidence = Math.min(85, 70 + Math.round((bestScore - 300) / 10));
    } else if (bestScore >= 200) {
      // –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç - —É–º–µ—Ä–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      confidence = Math.min(75, 60 + Math.round((bestScore - 200) / 8));
    } else {
      // –ù–∏–∑–∫–∏–π —Å—á–µ—Ç - –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      confidence = Math.min(65, 50 + Math.round((bestScore - 150) / 5));
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –≥–∏—Ç–∞—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (bestGuitarBonus > 50) {
      confidence += 10;
      console.log(`üé∏ –ë–æ–Ω—É—Å –∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≥–∏—Ç–∞—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: +10`);
    }
    
    confidence = Math.max(50, Math.min(95, confidence)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    
    // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –¥–ª—è –≤—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (91%+)
    if (confidence >= 91) {
      console.log(`‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: ${bestChord} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ${confidence}% - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!`);
      
      // –ü—Ä—è–º–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
      lockChordOnConfidentDetection(
        { name: bestChord, confidence: confidence },
        confidence,
        setLockedChord,
        setLockTimestamp,
        lockReleaseTimerRef
      );
    }
    
    if (setChordConfidence) {
      setChordConfidence(confidence);
    }
    
    console.log(`üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${bestChord} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ${confidence}% (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: ${bestScore.toFixed(1)})`);
    console.log(`   –°–æ–≤–ø–∞–≤—à–∏–µ –Ω–æ—Ç—ã: [${bestMatches.join(', ')}]`);
    console.log(`   üìà –î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ Wikipedia Piano Key Frequencies (A4=440Hz)`);
    return {
      name: bestChord,
      confidence: confidence,
      matches: bestMatches,
      score: bestScore
    };
  }

  // –ó–ê–ü–ê–°–ù–û–ô –ê–õ–ì–û–†–ò–¢–ú: –µ—Å–ª–∏ —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  console.log("üö® –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É");
  
  let fallbackChord = null;
  let fallbackScore = 0;
  
  for (const [chord, requiredNotes] of Object.entries(CHORDS)) {
    const matches = requiredNotes.filter(n => names.includes(n));
    
    if (matches.length >= 1) { // –ï—â–µ –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –Ω–æ—Ç–∞
      let score = matches.length * 50; // –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç
      
      // –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
      const amplitudeBonus = strong
        .filter(n => matches.includes(n.note))
        .reduce((sum, n) => sum + Math.abs(n.amp) * 2, 0);
      
      const totalScore = score + amplitudeBonus;
      
      if (totalScore > fallbackScore) {
        fallbackScore = totalScore;
        fallbackChord = chord;
      }
    }
  }
  
  if (fallbackChord && fallbackScore > 30) {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    let confidence;
    if (fallbackScore >= 150) {
      confidence = Math.min(70, 50 + Math.round((fallbackScore - 150) / 10));
    } else if (fallbackScore >= 100) {
      confidence = Math.min(60, 40 + Math.round((fallbackScore - 100) / 5));
    } else {
      confidence = Math.min(50, 30 + Math.round((fallbackScore - 30) / 3));
    }
    
    if (setChordConfidence) {
      setChordConfidence(confidence);
    }
    
    console.log(`üéØ –ó–ê–ü–ê–°–ù–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${fallbackChord} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ${confidence}% (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)`);
    return {
      name: fallbackChord,
      confidence: confidence,
      matches: [],
      score: fallbackScore
    };
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  if (setChordConfidence) {
    setChordConfidence(0);
  }

  return null;
}


export default function PitchTrainer({ expected, type, onSuccess, onCancel }) {
  const [running, setRunning] = useState(false);
  const [freq, setFreq] = useState(null);
  const [cents, setCents] = useState(null);
  const [result, setResult] = useState(null);
  const [mode, setMode] = useState("guitar"); // "guitar" | "piano" | "chord"
  const [error, setError] = useState(null);
  const [audioLevel, setAudioLevel] = useState(0); // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
  const [detectedNotes, setDetectedNotes] = useState([]); // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ—Ç
  const [chordConfidence, setChordConfidence] = useState(0); // –ü—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–∫–∫–æ—Ä–¥–µ
  const [isCorrect, setIsCorrect] = useState(false); // –§–ª–∞–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  
  // –°–∏—Å—Ç–µ–º–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∞–∫–∫–æ—Ä–¥–æ–≤ –ø—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
  const [lockedChord, setLockedChord] = useState(null); // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥
  const [lockTimestamp, setLockTimestamp] = useState(0); // –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

  const audioCtxRef = useRef(null);
  const smoothFreqRef = useRef(null);
  const lastChordRef = useRef(null);
  const streamRef = useRef(null);
  const animationRef = useRef(null);
  const lastAnalysisTime = useRef(0); // –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞–∫–∫–æ—Ä–¥–æ–≤
  const chordHistoryRef = useRef([]); // –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
  const stableChordRef = useRef(null); // –¢–µ–∫—É—â–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∞–∫–∫–æ—Ä–¥
  const lockReleaseTimerRef = useRef(null); // –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–æ—Ä–¥–∞

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (type === "chord") {
      setMode("chord");
    } else if (type === "note") {
      setMode("guitar"); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–∏—Ç–∞—Ä–∞ –¥–ª—è –Ω–æ—Ç
    }
  }, [type]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ expected –∑–Ω–∞—á–µ–Ω–∏—é
  useEffect(() => {
    if (!expected || !result) {
      setIsCorrect(false);
      return;
    }

    let detected = null;
    let correct = false;

    if (type === "chord" && mode === "chord") {
      // –î–ª—è –∞–∫–∫–æ—Ä–¥–æ–≤ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const chordMatch = result.match(/[A-G][#b]?m?/);
      if (chordMatch) {
        detected = chordMatch[0];
        correct = detected === expected;
      }
    } else if (type === "note" && (mode === "guitar" || mode === "piano")) {
      // –î–ª—è –Ω–æ—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const noteMatch = result.match(/[A-G][#b]?/);
      if (noteMatch) {
        detected = noteMatch[0];
        correct = detected === expected;
      }
    }

    setIsCorrect(correct);

    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –≤—ã–∑—ã–≤–∞–µ–º onSuccess —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    if (correct && onSuccess) {
      setTimeout(() => {
        onSuccess();
      }, 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }
  }, [result, expected, type, mode, onSuccess]);

  const startTuner = async () => {
    if (running) return;
    
    try {
      setError(null);
      console.log("Starting tuner...");
      
      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      audioCtxRef.current = audioCtx;

      await audioCtx.resume();
      console.log("Audio context resumed");
      
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      streamRef.current = stream;
      console.log("Microphone access granted");
      
      const source = audioCtx.createMediaStreamSource(stream);

      // –°–æ–∑–¥–∞–µ–º analyser —Å–Ω–∞—á–∞–ª–∞
      const analyser = audioCtx.createAnalyser();
      analyser.fftSize = 4096;                    // ‚Üë —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      analyser.smoothingTimeConstant = 0.0;       // –±–µ–∑ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è ‚Äî –Ω–∞–º –≤–∞–∂–Ω—ã –ø–∏–∫–∏
      analyser.minDecibels = -100;
      analyser.maxDecibels = -30;

      // Band-pass —Ñ–∏–ª—å—Ç—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —à—É–º–æ–≤
      const hp = audioCtx.createBiquadFilter();
      hp.type = "highpass"; 
      hp.frequency.value = 120; // –ü–æ–≤—ã—à–∞–µ–º –¥–æ 120Hz –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —à—É–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
      hp.Q.value = 0.7; // –î–æ–±–∞–≤–ª—è–µ–º Q-factor –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∑–∫–æ–≥–æ —Å—Ä–µ–∑–∞

      const lp = audioCtx.createBiquadFilter();
      lp.type = "lowpass"; 
      lp.frequency.value = 1500; // –°–Ω–∏–∂–∞–µ–º –¥–æ 1500Hz - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      lp.Q.value = 0.7;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π notch-—Ñ–∏–ª—å—Ç—Ä –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ —à—É–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ (–æ–±—ã—á–Ω–æ 50-60Hz)
      const notch = audioCtx.createBiquadFilter();
      notch.type = "notch";
      notch.frequency.value = 60; // –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–µ—Ç–µ–≤–æ–≥–æ —à—É–º–∞/–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
      notch.Q.value = 10; // –£–∑–∫–∏–π notch

      // –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–µ–¥–∏–Ω—è–µ–º —Ü–µ–ø–æ—á–∫—É
      source.connect(hp);
      hp.connect(notch);
      notch.connect(lp);
      lp.connect(analyser);

      const timeBuf = new Float32Array(analyser.fftSize);
      const freqBuf = new Float32Array(analyser.frequencyBinCount);

      function loop() {
        analyser.getFloatTimeDomainData(timeBuf);

        // —à—É–º- –∏ —Ç–∏—à–∏–Ω–∞-–≥–µ–π—Ç
        let rms = 0; 
        for (let i = 0; i < timeBuf.length; i++) rms += timeBuf[i] * timeBuf[i];
        rms = Math.sqrt(rms / timeBuf.length);
        
        setAudioLevel(rms); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
        
        if (rms < 0.025) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 0.025 (–ø—Ä–∏–º–µ—Ä–Ω–æ 85% –≥—Ä–æ–º–∫–æ—Å—Ç–∏) –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
          animationRef.current = requestAnimationFrame(loop); 
          return; 
        }

        removeDC(timeBuf); 
        hannWindow(timeBuf);

        // === –†–ï–ñ–ò–ú–´ ===
        if (mode === "guitar" || mode === "piano") {
          // YIN –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –Ω–æ—Ç
          let f = yinPitch(timeBuf, audioCtx.sampleRate);
          if (f > 0) {
            console.log("Detected frequency:", f);
            
            // –∞–Ω—Ç–∏-–æ–∫—Ç–∞–≤–Ω—ã–µ —Å–∫–∞—á–∫–∏
            if (smoothFreqRef.current) {
              const prev = smoothFreqRef.current, ratio = f / prev;
              if (Math.abs(ratio - 2) < 0.1) f = f / 2;
              else if (Math.abs(ratio - 0.5) < 0.1) f = f * 2;
            }
            // —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            const alpha = 0.3;
            smoothFreqRef.current = smoothFreqRef.current
              ? smoothFreqRef.current * (1 - alpha) + f * alpha
              : f;

            const sm = smoothFreqRef.current;
            const closest = findClosestNote(sm);
            const centsDiff = 1200 * Math.log2(sm / closest.freq);

            setFreq(sm.toFixed(2));
            setCents(centsDiff.toFixed(1));

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—É –Ω–æ—Ç—ã –±–µ–∑ –æ–∫—Ç–∞–≤—ã –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
            const base = normalizePitchClass(closest.note);
            if (mode === "guitar") {
              setResult(`üé∏ –ù–æ—Ç–∞: ${base}`);
            } else {
              setResult(`üéπ –ù–æ—Ç–∞: ${base}`);
            }
          }
        } else if (mode === "chord") {
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∞–Ω–∞–ª–∏–∑–∞ –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
          const now = Date.now();
          if (now - lastAnalysisTime.current > 200) { // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 200–º—Å
            lastAnalysisTime.current = now;
            
            // –î–µ—Ç–µ–∫—Ü–∏—è –∞–∫–∫–æ—Ä–¥–∞ –ø–æ —Å–ø–µ–∫—Ç—Ä—É
            analyser.getFloatFrequencyData(freqBuf);
            const chordCandidate = detectChord(freqBuf, audioCtx.sampleRate, setDetectedNotes, setChordConfidence, lockedChord, lockTimestamp, setLockedChord, setLockTimestamp, lockReleaseTimerRef);
            
            // –ü–†–ò–û–†–ò–¢–ï–¢: –µ—Å–ª–∏ chordCandidate —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if (chordCandidate && chordCandidate.isLocked) {
              console.log(`‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${chordCandidate.name} (${chordCandidate.confidence}%)`);
              const displayText = chordCandidate.lockType === 'HIGH_CONFIDENCE'
                ? `üîê ${chordCandidate.name} (${chordCandidate.confidence}% - –∑–∞—â–∏—â–µ–Ω)`
                : `üîí ${chordCandidate.name} (${chordCandidate.confidence}% - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)`;
              setResult(displayText);
              animationRef.current = requestAnimationFrame(loop);
              return;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∞–∫–∫–æ—Ä–¥–æ–≤
            const stableChord = stabilizeChord(
              chordCandidate, 
              chordHistoryRef, 
              stableChordRef,
              lockedChord,
              lockTimestamp,
              setLockedChord,
              setLockTimestamp,
              lockReleaseTimerRef
            );
            
            if (stableChord && stableChord.confidence >= 70) {
              let displayText;
              if (stableChord.isLocked) {
                const lockIcon = stableChord.lockType === 'HIGH_CONFIDENCE' ? 'ÔøΩ' : 'ÔøΩüîí';
                const lockDescription = stableChord.lockType === 'HIGH_CONFIDENCE' ? '–∑–∞—â–∏—â–µ–Ω' : '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
                displayText = `${lockIcon} ${stableChord.name} (${stableChord.confidence}% - ${lockDescription})`;
              } else {
                displayText = `üé∂ –ê–∫–∫–æ—Ä–¥: ${stableChord.name} (${stableChord.confidence}%)`;
              }
              setResult(displayText);
            } else if (stableChord && stableChord.confidence >= 55) {
              setResult(`üîç –í–µ—Ä–æ—è—Ç–Ω–æ: ${stableChord.name} (${stableChord.confidence}%)`);
            } else if (chordCandidate && chordCandidate.confidence >= 40) {
              setResult(`‚ùì –í–æ–∑–º–æ–∂–Ω–æ: ${chordCandidate.name} (${chordCandidate.confidence}%)`);
            } else {
              setResult("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–∫–∫–æ—Ä–¥...");
            }
          }
        }

        animationRef.current = requestAnimationFrame(loop);
      }

      setRunning(true);
      loop();
      console.log("Tuner started successfully");
      
    } catch (err) {
      console.error("Error starting tuner:", err);
      setError(`–û—à–∏–±–∫–∞: ${err.message}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø.`);
      setRunning(false);
    }
  };

  const stopTuner = () => {
    console.log("Stopping tuner...");
    setRunning(false);
    
    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current);
      animationRef.current = null;
    }
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    
    if (audioCtxRef.current) {
      audioCtxRef.current.close();
      audioCtxRef.current = null;
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–æ—Ä–¥–∞
    if (lockReleaseTimerRef.current) {
      clearTimeout(lockReleaseTimerRef.current);
      lockReleaseTimerRef.current = null;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setFreq(null);
    setCents(null);
    setResult(null);
    setAudioLevel(0);
    setDetectedNotes([]);
    setChordConfidence(0);
    smoothFreqRef.current = null;
    lastChordRef.current = null;
    chordHistoryRef.current = [];
    stableChordRef.current = null;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–æ—Ä–¥–∞
    setLockedChord(null);
    setLockTimestamp(0);
    
    console.log("Tuner stopped");
  };

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (running) {
        stopTuner();
      }
    };
  }, [running]);

  return (
    <div style={{ padding: 16 }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
        <h2>üéµ –¢—é–Ω–µ—Ä</h2>
        {onCancel && (
          <button 
            onClick={onCancel}
            style={{ 
              padding: '8px 16px', 
              backgroundColor: '#f44336', 
              color: 'white', 
              border: 'none', 
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        )}
      </div>

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */}
      {expected && (
        <div style={{ 
          marginBottom: 16, 
          padding: 12, 
          backgroundColor: '#e3f2fd', 
          borderRadius: 8,
          textAlign: 'center'
        }}>
          <h3 style={{ margin: '0 0 8px 0', color: '#1976d2' }}>
            –í–∞—à–∞ –∑–∞–¥–∞—á–∞: —Å—ã–≥—Ä–∞—Ç—å <strong>{expected}</strong>
          </h3>
          <p style={{ margin: 0, color: '#666', fontSize: '14px' }}>
            {type === "chord" ? "–°—ã–≥—Ä–∞–π—Ç–µ –∞–∫–∫–æ—Ä–¥ –Ω–∞ –≥–∏—Ç–∞—Ä–µ" : "–°—ã–≥—Ä–∞–π—Ç–µ –Ω–æ—Ç—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ"}
          </p>
        </div>
      )}

      <div style={{ marginBottom: 12 }}>
        <label>–†–µ–∂–∏–º: </label>
        <select value={mode} onChange={(e) => setMode(e.target.value)} disabled={running}>
          <option value="guitar">–ì–∏—Ç–∞—Ä–∞ (–Ω–æ—Ç–∞)</option>
          <option value="piano">–ü–∏–∞–Ω–∏–Ω–æ (–Ω–æ—Ç–∞)</option>
          <option value="chord">–ê–∫–∫–æ—Ä–¥—ã</option>
        </select>
      </div>

      {error && (
        <div style={{ color: 'red', marginBottom: 12, padding: 8, border: '1px solid red', borderRadius: 4 }}>
          {error}
        </div>
      )}

      <div style={{ marginBottom: 12 }}>
        {!running ? (
          <button onClick={startTuner} style={{ padding: '8px 16px', fontSize: '16px' }}>
            üé§ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—é–Ω–µ—Ä
          </button>
        ) : (
          <button onClick={stopTuner} style={{ padding: '8px 16px', fontSize: '16px', backgroundColor: '#ff4444', color: 'white' }}>
            ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </button>
        )}
      </div>

      {running && (
        <div style={{ marginTop: 20, padding: 16, border: '1px solid #ccc', borderRadius: 8 }}>
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞ */}
          <div style={{ marginBottom: 16 }}>
            <p><strong>–£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞:</strong></p>
            <div style={{ 
              width: '100%', 
              height: '20px', 
              backgroundColor: '#eee', 
              borderRadius: '10px',
              overflow: 'hidden'
            }}>
              <div style={{ 
                width: `${Math.min(audioLevel * 2000, 100)}%`, // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞ 85%
                height: '100%', 
                backgroundColor: audioLevel > 0.025 ? '#4CAF50' : '#FF5722', // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                transition: 'width 0.1s'
              }}></div>
            </div>
            <small>RMS: {audioLevel.toFixed(4)}</small>
          </div>
          
          {(mode !== "chord") && freq && (
            <>
              <p><strong>–ß–∞—Å—Ç–æ—Ç–∞:</strong> {freq} Hz</p>
              <p><strong>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:</strong> {cents} cents</p>
            </>
          )}
          
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–∫–∫–æ—Ä–¥–æ–≤ */}
          {mode === "chord" && detectedNotes.length > 0 && (
            <div style={{ marginBottom: 12 }}>
              <p><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–æ—Ç—ã:</strong></p>
              <div style={{ 
                display: 'flex', 
                gap: '8px', 
                flexWrap: 'wrap',
                marginBottom: '8px'
              }}>
                {detectedNotes.map((note, index) => (
                  <span key={index} style={{ 
                    padding: '4px 8px', 
                    backgroundColor: '#e3f2fd', 
                    borderRadius: '4px',
                    fontSize: '14px',
                    fontWeight: 'bold'
                  }}>
                    {note}
                  </span>
                ))}
              </div>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ */}
              {chordConfidence > 0 && (
                <div style={{ marginTop: '8px' }}>
                  <p style={{ margin: '4px 0', fontSize: '14px' }}>
                    <strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {chordConfidence}%</strong>
                  </p>
                  <div style={{ 
                    width: '100%', 
                    height: '8px', 
                    backgroundColor: '#eee', 
                    borderRadius: '4px',
                    overflow: 'hidden'
                  }}>
                    <div style={{ 
                      width: `${chordConfidence}%`, 
                      height: '100%', 
                      backgroundColor: chordConfidence >= 75 ? '#4CAF50' : 
                                     chordConfidence >= 60 ? '#FF9800' : '#F44336',
                      transition: 'width 0.3s, background-color 0.3s'
                    }}></div>
                  </div>
                </div>
              )}
              
              <small style={{ color: '#666', fontSize: '12px' }}>
                –ù–∞–π–¥–µ–Ω–æ: {detectedNotes.length} –Ω–æ—Ç | –¢—Ä–µ–±—É–µ—Ç—Å—è –≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫ (85%+ —É—Ä–æ–≤–Ω—è)<br/>
                <span style={{ fontSize: '10px' }}>–ß–∞—Å—Ç–æ—Ç—ã –∞–∫–∫–æ—Ä–¥–æ–≤ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ A4=440Hz (Wikipedia Piano Key Frequencies)</span>
              </small>
            </div>
          )}
          
          {result ? (
            <div>
              <p style={{ fontSize: '18px', fontWeight: 'bold' }}>{result}</p>
              {isCorrect && (
                <div style={{
                  marginTop: 16,
                  padding: 12,
                  backgroundColor: '#4CAF50',
                  color: 'white',
                  borderRadius: 8,
                  textAlign: 'center'
                }}>
                  <h3 style={{ margin: '0 0 8px 0' }}>üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</h3>
                  <p style={{ margin: 0 }}>–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å—ã–≥—Ä–∞–ª–∏ {expected}!</p>
                </div>
              )}
            </div>
          ) : (
            <p style={{ fontStyle: 'italic' }}>–°–ª—É—à–∞—é... –ò–≥—Ä–∞–π—Ç–µ –Ω–æ—Ç—É –∏–ª–∏ –∞–∫–∫–æ—Ä–¥</p>
          )}
        </div>
      )}

      {!running && (
        <div style={{ marginTop: 20, fontSize: '14px', color: '#666' }}>
          <p>üí° –°–æ–≤–µ—Ç—ã:</p>
          <ul>
            <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</li>
            <li>–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ</li>
            <li><strong>–ò–≥—Ä–∞–π—Ç–µ –≥—Ä–æ–º–∫–æ</strong> - —Ç—é–Ω–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (85%+ –≥—Ä–æ–º–∫–æ—Å—Ç–∏)</li>
            <li>–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫–∫–æ—Ä–¥–æ–≤ –∏–≥—Ä–∞–π—Ç–µ –≤—Å–µ –Ω–æ—Ç—ã —á–µ—Ç–∫–æ</li>
            <li>–§–æ–Ω–æ–≤—ã–µ —à—É–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è</li>
          </ul>
        </div>
      )}
    </div>
  );
}
