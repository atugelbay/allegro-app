import React, { useState, useEffect, useRef, useCallback } from 'react';
import GuitarVisualizer from './GuitarVisualizer';
import PianoVisualizer from './PianoVisualizer';
import audioPlayer from '../utils/audioPlayer';

const SongDisplay = ({ 
  songTitle, 
  chordSequence, 
  autoPlay = false,
  showChordSequence = true,
  instrument = 'guitar', // –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  onChordPlay 
}) => {
  const [currentChordIndex, setCurrentChordIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [playbackSpeed, setPlaybackSpeed] = useState(2000); // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∞–∫–∫–æ—Ä–¥
  const [hasAutoPlayed, setHasAutoPlayed] = useState(false);
  const isMountedRef = useRef(true);
  const shouldStopRef = useRef(false);

  // –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫–∫–æ—Ä–¥–æ–≤ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    shouldStopRef.current = false;
    
    if (autoPlay && chordSequence && chordSequence.length > 0 && !isPlaying && !hasAutoPlayed) {
      setIsPlaying(true);
      setHasAutoPlayed(true);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      setTimeout(() => {
        if (isMountedRef.current && !shouldStopRef.current) {
          playChordSequence();
        }
      }, 2000);
    }
  }, [autoPlay, chordSequence, isPlaying, hasAutoPlayed, playChordSequence]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤—É–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      isMountedRef.current = false;
      shouldStopRef.current = true;
      audioPlayer.stopAll();
    };
  }, []);

  const playChordSequence = useCallback(async () => {
    if (!chordSequence || chordSequence.length === 0) {
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–≤—É–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    audioPlayer.stopAll();
    audioPlayer.resetStopFlag();
    if (isMountedRef.current) {
      setIsPlaying(true);
    }
    shouldStopRef.current = false;
    
    for (let i = 0; i < chordSequence.length; i++) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
      if (shouldStopRef.current || !isMountedRef.current || audioPlayer.shouldStop()) {
        break;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –∞–∫–∫–æ—Ä–¥–∞
      if (shouldStopRef.current || !isMountedRef.current || audioPlayer.shouldStop()) {
        break;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∞–∫–∫–æ—Ä–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
      if (isMountedRef.current) {
        setCurrentChordIndex(i);
      }
      const chord = chordSequence[i];
      
      try {
        await audioPlayer.initialize();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
        if (shouldStopRef.current || !isMountedRef.current || audioPlayer.shouldStop()) {
          break;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ—Ç–æ–π (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—É)
        const isNote = /\d/.test(chord);
        
        if (isNote) {
          await audioPlayer.playNote(chord, Math.max(0.8, playbackSpeed / 1000));
        } else {
          await audioPlayer.playChord(chord, Math.max(1.2, playbackSpeed / 1000), instrument);
        }
        
        if (onChordPlay && isMountedRef.current) {
          onChordPlay(chord, i);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞–∫–∫–æ—Ä–¥–∞
        if (shouldStopRef.current || !isMountedRef.current || audioPlayer.shouldStop()) {
          break;
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–∫–∫–æ—Ä–¥–æ–º/–Ω–æ—Ç–æ–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫–∞–∂–¥—ã–µ 100–º—Å
        let remainingTime = playbackSpeed;
        while (remainingTime > 0 && !shouldStopRef.current && isMountedRef.current && !audioPlayer.shouldStop()) {
          const checkInterval = Math.min(100, remainingTime);
          await new Promise(resolve => setTimeout(resolve, checkInterval));
          remainingTime -= checkInterval;
        }
        
        // –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
        if (shouldStopRef.current || !isMountedRef.current || audioPlayer.shouldStop()) {
          break;
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${chord}:`, error);
      }
    }
    
    if (isMountedRef.current) {
      setIsPlaying(false);
      setCurrentChordIndex(0);
    }
  }, [chordSequence, playbackSpeed, instrument, onChordPlay]);

  const playSingleChord = async (chord, index) => {
    try {
      setCurrentChordIndex(index);
      await audioPlayer.initialize();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ—Ç–æ–π (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—É)
      const isNote = /\d/.test(chord);
      
      if (isNote) {
        await audioPlayer.playNote(chord, 1.8);
      } else {
        await audioPlayer.playChord(chord, 2.5, instrument);
      }
      
      if (onChordPlay) {
        onChordPlay(chord, index);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${chord}:`, error);
    }
  };

  const stopPlayback = () => {
    shouldStopRef.current = true;
    if (isMountedRef.current) {
      setIsPlaying(false);
      setCurrentChordIndex(0);
    }
    audioPlayer.stopAll();
  };

  if (!songTitle || !chordSequence) {
    return (
      <div style={{ 
        padding: '20px', 
        textAlign: 'center', 
        color: '#7f8c8d' 
      }}>
        <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Å–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
      </div>
    );
  }

  return (
    <div style={{ 
      padding: '20px',
      border: '1px solid #e0e0e0',
      borderRadius: '12px',
      backgroundColor: '#f9f9f9',
      margin: '20px 0'
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Å–Ω–∏ */}
      <div style={{ textAlign: 'center', marginBottom: '20px' }}>
        <h3 style={{ 
          margin: '0 0 10px 0', 
          color: '#2c3e50',
          fontSize: '24px'
        }}>
          üéµ {songTitle}
        </h3>
        <p style={{ 
          margin: '0', 
          color: '#7f8c8d',
          fontSize: '14px'
        }}>
          –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        </p>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        gap: '10px',
        marginBottom: '20px',
        flexWrap: 'wrap'
      }}>
        <button
          onClick={playChordSequence}
          disabled={isPlaying}
          style={{
            padding: '10px 20px',
            backgroundColor: isPlaying ? '#95a5a6' : '#27ae60',
            color: 'white',
            border: 'none',
            borderRadius: '20px',
            cursor: isPlaying ? 'not-allowed' : 'pointer',
            fontSize: '14px',
            fontWeight: 'bold',
            transition: 'all 0.3s ease',
            boxShadow: isPlaying ? 'none' : '0 2px 4px rgba(39, 174, 96, 0.3)'
          }}
        >
          {isPlaying ? 'üéµ –ò–≥—Ä–∞–µ—Ç...' : '‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—Å—é –ø–µ—Å–Ω—é'}
        </button>
        
        <button
          onClick={stopPlayback}
          disabled={!isPlaying}
          style={{
            padding: '10px 20px',
            backgroundColor: !isPlaying ? '#bdc3c7' : '#e74c3c',
            color: 'white',
            border: 'none',
            borderRadius: '20px',
            cursor: !isPlaying ? 'not-allowed' : 'pointer',
            fontSize: '14px',
            fontWeight: 'bold',
            transition: 'all 0.3s ease'
          }}
        >
          ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center',
        gap: '10px',
        marginBottom: '20px'
      }}>
        <label style={{ fontSize: '14px', color: '#2c3e50' }}>
          –°–∫–æ—Ä–æ—Å—Ç—å:
        </label>
        <input
          type="range"
          min="1000"
          max="4000"
          step="500"
          value={playbackSpeed}
          onChange={(e) => setPlaybackSpeed(parseInt(e.target.value))}
          style={{ width: '150px' }}
        />
        <span style={{ fontSize: '12px', color: '#7f8c8d' }}>
          {playbackSpeed / 1000}—Å
        </span>
      </div>

      {/* –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫–∫–æ—Ä–¥–æ–≤ */}
      {showChordSequence && (
        <div style={{ marginBottom: '20px' }}>
          <h4 style={{ 
            margin: '0 0 15px 0', 
            color: '#2c3e50',
            textAlign: 'center'
          }}>
            –ê–∫–∫–æ—Ä–¥—ã –ø–µ—Å–Ω–∏:
          </h4>
          
          <div style={{ 
            display: 'flex', 
            justifyContent: 'center',
            gap: '10px',
            flexWrap: 'wrap'
          }}>
            {chordSequence.map((chord, index) => (
              <button
                key={index}
                onClick={() => playSingleChord(chord, index)}
                style={{
                  padding: '12px 16px',
                  backgroundColor: currentChordIndex === index ? '#3498db' : '#ecf0f1',
                  color: currentChordIndex === index ? 'white' : '#2c3e50',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  transition: 'all 0.3s ease',
                  boxShadow: currentChordIndex === index 
                    ? '0 4px 12px rgba(52, 152, 219, 0.3)' 
                    : '0 2px 4px rgba(0,0,0,0.1)',
                  transform: currentChordIndex === index ? 'scale(1.05)' : 'scale(1)'
                }}
              >
                {chord}
              </button>
            ))}
          </div>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
          {isPlaying && (
            <div style={{ 
              marginTop: '15px',
              textAlign: 'center'
            }}>
              <div style={{ 
                fontSize: '14px', 
                color: '#3498db',
                marginBottom: '5px'
              }}>
                –ê–∫–∫–æ—Ä–¥ {currentChordIndex + 1} –∏–∑ {chordSequence.length}
              </div>
              <div style={{
                width: '100%',
                height: '4px',
                backgroundColor: '#ecf0f1',
                borderRadius: '2px',
                overflow: 'hidden'
              }}>
                <div style={{
                  width: `${((currentChordIndex + 1) / chordSequence.length) * 100}%`,
                  height: '100%',
                  backgroundColor: '#3498db',
                  transition: 'width 0.3s ease'
                }} />
              </div>
            </div>
          )}
        </div>
      )}

      {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–æ—Ä–¥–∞/–Ω–æ—Ç—ã */}
      {chordSequence.length > 0 && (
        <div style={{ textAlign: 'center' }}>
          {(() => {
            const currentItem = chordSequence[currentChordIndex];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ—Ç–æ–π (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—É)
            const isNote = /\d/.test(currentItem);
            
            if (isNote) {
              return (
                <PianoVisualizer 
                  noteName={currentItem}
                  autoPlay={false}
                  size="medium"
                  showPlayButton={false}
                  onPlay={(note) => console.log(`üéπ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–æ—Ç–∞: ${note}`)}
                />
              );
            } else {
              return (
                <GuitarVisualizer 
                  chordName={currentItem}
                  autoPlay={false}
                  size="medium"
                  showPlayButton={false}
                  onPlay={(chord) => console.log(`üé∏ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∞–∫–∫–æ—Ä–¥: ${chord}`)}
                />
              );
            }
          })()}
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Å–Ω–µ */}
      <div style={{ 
        marginTop: '20px',
        padding: '15px',
        backgroundColor: '#ecf0f1',
        borderRadius: '8px',
        fontSize: '14px',
        color: '#2c3e50'
      }}>
        <h5 style={{ margin: '0 0 10px 0' }}>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</h5>
        <ul style={{ margin: '0', paddingLeft: '20px' }}>
          <li>–ò–∑—É—á–∏—Ç–µ –∫–∞–∂–¥—ã–π –∞–∫–∫–æ—Ä–¥ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
          <li>–ù–∞—á–Ω–∏—Ç–µ —Å –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–∫–æ—Ä—è–π—Ç–µ—Å—å</li>
          <li>–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å —Å –º–µ—Ç—Ä–æ–Ω–æ–º–æ–º –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —á—É–≤—Å—Ç–≤–∞ —Ä–∏—Ç–º–∞</li>
          <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞–ø–ø–ª–∏–∫–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞</li>
        </ul>
      </div>
    </div>
  );
};

export default SongDisplay;
