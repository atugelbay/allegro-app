/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–ª—è —É—Ä–æ–∫–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ—Ç—ã, –∞–∫–∫–æ—Ä–¥—ã –∏ –ø–µ—Å–Ω–∏
 */

// –ò–º–ø–æ—Ä—Ç SoundFont –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
let soundfontLoader = null;
let guitarSoundfontLoader = null;

class AudioPlayer {
  constructor() {
    this.audioContext = null;
    this.gainNode = null;
    this.isInitialized = false;
    this.audioBuffers = new Map(); // –ö—ç—à –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
    this.currentSounds = new Set(); // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    this.shouldStopGlobal = false; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SoundFont –∑–∞–≥—Ä—É–∑—á–∏–∫
    this.initializeSoundfontLoader();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SoundFont –∑–∞–≥—Ä—É–∑—á–∏–∫–∏
   */
  async initializeSoundfontLoader() {
    try {
      const pianoModule = await import('./soundfontLoader.js');
      soundfontLoader = pianoModule.default;
      console.log('üéπ –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏–∞–Ω–∏–Ω–æ SoundFont –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      const guitarModule = await import('./guitarSoundfontLoader.js');
      guitarSoundfontLoader = guitarModule.default;
      console.log('üé∏ –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞ SoundFont –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SoundFont –∑–∞–≥—Ä—É–∑—á–∏–∫–∏:', error);
    }
  }

  async initialize() {
    if (this.isInitialized) return;
    
    try {
      // –°–æ–∑–¥–∞–µ–º AudioContext
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
      
      // –°–æ–∑–¥–∞–µ–º GainNode –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
      this.gainNode = this.audioContext.createGain();
      this.gainNode.connect(this.audioContext.destination);
      this.gainNode.gain.value = 0.7; // –ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      this.isInitialized = true;
      console.log('üéµ AudioPlayer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AudioPlayer:', error);
      throw error;
    }
  }

  async resumeContext() {
    if (this.audioContext && this.audioContext.state === 'suspended') {
      await this.audioContext.resume();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç AudioBuffer
   */
  async loadAudioBuffer(url) {
    if (this.audioBuffers.has(url)) {
      return this.audioBuffers.get(url);
    }

    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const arrayBuffer = await response.arrayBuffer();
      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);
      
      this.audioBuffers.set(url, audioBuffer);
      return audioBuffer;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ ${url}:`, error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∑–≤—É–∫ –ø–∏–∞–Ω–∏–Ω–æ
   */
  createPianoTone(frequency, duration = 1.5) {
    if (!this.isInitialized) {
      throw new Error('AudioPlayer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    const now = this.audioContext.currentTime;
    const sounds = [];

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω (—Å–∞–º–∞—è –≥—Ä–æ–º–∫–∞—è)
    const mainOsc = this.audioContext.createOscillator();
    const mainGain = this.audioContext.createGain();
    mainOsc.type = 'triangle';
    mainOsc.frequency.value = frequency;
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –æ–≥–∏–±–∞—é—â—É—é –ø–∏–∞–Ω–∏–Ω–æ
    mainGain.gain.setValueAtTime(0, now);
    mainGain.gain.linearRampToValueAtTime(0.4, now + 0.05); // –ë—ã—Å—Ç—Ä—ã–π –∞—Ç–∞–∫–∞
    mainGain.gain.exponentialRampToValueAtTime(0.2, now + 0.3); // –°–ø–∞–¥
    mainGain.gain.exponentialRampToValueAtTime(0.01, now + duration);
    
    mainOsc.connect(mainGain);
    mainGain.connect(this.gainNode);
    
    mainOsc.start(now);
    mainOsc.stop(now + duration);
    sounds.push({ oscillator: mainOsc, gainNode: mainGain });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    this.currentSounds.add(mainOsc);
    mainOsc.onended = () => {
      this.currentSounds.delete(mainOsc);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫–∏ –¥–ª—è –±–æ–≥–∞—Ç—Å—Ç–≤–∞ –∑–≤—É–∫–∞
    const harmonics = [2, 3, 4, 5];
    harmonics.forEach((harmonic, index) => {
      const osc = this.audioContext.createOscillator();
      const gain = this.audioContext.createGain();
      
      osc.type = 'sine';
      osc.frequency.value = frequency * harmonic;
      
      // –ì–∞—Ä–º–æ–Ω–∏–∫–∏ —Ç–∏—à–µ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã
      const harmonicVolume = 0.1 / (index + 1);
      gain.gain.setValueAtTime(0, now);
      gain.gain.linearRampToValueAtTime(harmonicVolume, now + 0.05);
      gain.gain.exponentialRampToValueAtTime(harmonicVolume * 0.5, now + 0.2);
      gain.gain.exponentialRampToValueAtTime(0.01, now + duration * 0.8);
      
      osc.connect(gain);
      gain.connect(this.gainNode);
      
      osc.start(now);
      osc.stop(now + duration * 0.8);
      sounds.push({ oscillator: osc, gainNode: gain });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      this.currentSounds.add(osc);
      osc.onended = () => {
        this.currentSounds.delete(osc);
      };
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    const reverbOsc = this.audioContext.createOscillator();
    const reverbGain = this.audioContext.createGain();
    const delay = this.audioContext.createDelay();
    
    reverbOsc.type = 'triangle';
    reverbOsc.frequency.value = frequency * 0.99; // –ù–µ–±–æ–ª—å—à–æ–π –¥–µ—Ç—é–Ω –¥–ª—è —Ö–æ—Ä—É—Å–∞
    
    delay.delayTime.value = 0.1;
    
    reverbGain.gain.value = 0.05;
    
    reverbOsc.connect(reverbGain);
    reverbGain.connect(delay);
    delay.connect(this.gainNode);
    
    reverbOsc.start(now + 0.1);
    reverbOsc.stop(now + duration * 0.7);
    sounds.push({ oscillator: reverbOsc, gainNode: reverbGain });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    this.currentSounds.add(reverbOsc);
    reverbOsc.onended = () => {
      this.currentSounds.delete(reverbOsc);
    };

    return sounds;
  }



  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–≤—É–∫ –∏–∑ —á–∞—Å—Ç–æ—Ç—ã (–¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–≤—É–∫–æ–≤) - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
   */
  createTone(frequency, duration = 1.0, type = 'sine') {
    if (!this.isInitialized) {
      throw new Error('AudioPlayer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    const oscillator = this.audioContext.createOscillator();
    const gainNode = this.audioContext.createGain();
    
    oscillator.type = type;
    oscillator.frequency.value = frequency;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–≥–∏–±–∞—é—â–µ–π –∑–≤—É–∫–∞
    const now = this.audioContext.currentTime;
    gainNode.gain.setValueAtTime(0, now);
    gainNode.gain.linearRampToValueAtTime(0.3, now + 0.1);
    gainNode.gain.exponentialRampToValueAtTime(0.01, now + duration);
    
    oscillator.connect(gainNode);
    gainNode.connect(this.gainNode);
    
    oscillator.start(now);
    oscillator.stop(now + duration);
    
    return { oscillator, gainNode };
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –Ω–æ—Ç—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "C4", "A4")
   */
  async playNote(noteName) {
    if (!this.isInitialized) {
      await this.initialize();
    }
    await this.resumeContext();
    
    const frequency = this.noteToFrequency(noteName);
    if (!frequency) {
      console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ—Ç–∞: ${noteName}`);
      return null;
    }

    console.log(`üéπ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ—Ç—ã: ${noteName} (${frequency.toFixed(2)} Hz)`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SoundFont –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏–∞–Ω–∏–Ω–æ
    if (soundfontLoader && soundfontLoader.isNoteAvailable(noteName)) {
      try {
        console.log(`üéπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏–∞–Ω–∏–Ω–æ SoundFont –¥–ª—è –Ω–æ—Ç—ã ${noteName}`);
        const soundfontBuffer = await soundfontLoader.loadNoteSample(noteName);
        if (soundfontBuffer) {
          console.log(`‚úÖ –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏–∞–Ω–∏–Ω–æ SoundFont –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è ${noteName}`);
          return this.playAudioBuffer(soundfontBuffer);
        }
      } catch (soundfontError) {
        console.warn(`SoundFont –Ω–µ –ø–æ–º–æ–≥ –¥–ª—è ${noteName}:`, soundfontError);
      }
    }
    
    console.warn(`‚ùå SoundFont –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è ${noteName}`);
    return null; // –ù–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç SoundFont
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞–∫–∫–æ—Ä–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "C", "Am", "F")
   */
  async playChord(chordName, duration = 2.0, instrument = 'guitar') {
    if (!this.isInitialized) {
      await this.initialize();
    }
    await this.resumeContext();
    
    let notes;
    if (instrument === 'piano') {
      // –î–ª—è –ø–∏–∞–Ω–∏–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º 3 –Ω–æ—Ç—ã (—Ç—Ä–µ–∑–≤—É—á–∏–µ)
      notes = this.getChordNotes(chordName);
    } else {
      // –î–ª—è –≥–∏—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º 5 –Ω–æ—Ç (–∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –≥–∏—Ç–∞—Ä–µ)
      notes = this.getGuitarChordNotes(chordName);
    }
    
    if (!notes || notes.length === 0) {
      console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${chordName}`);
      return null;
    }

    console.log(`üé∏ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞: ${chordName} (${notes.join(', ')}) –Ω–∞ ${instrument}`);
    
    if (instrument === 'piano') {
      // –î–ª—è –ø–∏–∞–Ω–∏–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∏–∞–Ω–∏–Ω–æ SoundFont
      return this.playChordFromNotes(notes, duration);
    } else {
      // –î–ª—è –≥–∏—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏—Ç–∞—Ä–Ω—ã–π SoundFont
      return this.playGuitarChordFromNotes(notes, duration);
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç AudioBuffer —Å —É—Å–∏–ª–µ–Ω–∏–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
   */
  playAudioBuffer(audioBuffer, volumeBoost = 5.5, effects = {}, delay = 0) {
    if (!this.isInitialized) {
      throw new Error('AudioPlayer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    const source = this.audioContext.createBufferSource();
    source.buffer = audioBuffer;
    
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    let lastNode = source;
    
    // 1. –£—Å–∏–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    const volumeGain = this.audioContext.createGain();
    volumeGain.gain.value = volumeBoost;
    
    // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    if (effects.stringVibrato) {
      // –í–∏–±—Ä–∞—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É
      const vibratoEffect = this.createVibratoEffect(effects.stringVibrato);
      vibratoEffect.connect(source);
      lastNode = vibratoEffect.output;
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
    lastNode.connect(volumeGain);
    lastNode = volumeGain;
    
    if (effects.reverb) {
      // –†–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—è
      const reverbEffect = this.createReverbEffect(effects.reverb);
      reverbEffect.connect(lastNode);
      lastNode = reverbEffect.output;
    }
    
    if (effects.echo) {
      // –≠—Ö–æ
      const echoEffect = this.createEchoEffect(effects.echo);
      echoEffect.connect(lastNode);
      lastNode = echoEffect.output;
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤—ã—Ö–æ–¥—É
    lastNode.connect(this.gainNode);
    
    const now = this.audioContext.currentTime;
    source.start(now + delay);
    
    this.currentSounds.add(source);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤—É–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    source.onended = () => {
      this.currentSounds.delete(source);
    };
    
    return source;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏
   */
  createReverbEffect(intensity = 0.3) {
    const inputGain = this.audioContext.createGain();
    const outputGain = this.audioContext.createGain();
    const wetGain = this.audioContext.createGain();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏
    const delays = [0.1, 0.2, 0.3, 0.5];
    const delayNodes = delays.map(delayTime => {
      const delay = this.audioContext.createDelay(2); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
      delay.delayTime.value = delayTime;
      
      const feedbackGain = this.audioContext.createGain();
      feedbackGain.gain.value = intensity * 0.2;
      
      const delayOutputGain = this.audioContext.createGain();
      delayOutputGain.gain.value = intensity * 0.15;
      
      delay.connect(feedbackGain);
      feedbackGain.connect(delay);
      delay.connect(delayOutputGain);
      
      return { delay, delayOutputGain };
    });
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∫ wet –≤—ã—Ö–æ–¥—É
    delayNodes.forEach(({ delayOutputGain }) => {
      delayOutputGain.connect(wetGain);
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    wetGain.gain.value = intensity;
    outputGain.gain.value = 1.0;
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º wet —Å–∏–≥–Ω–∞–ª –∫ –≤—ã—Ö–æ–¥—É
    wetGain.connect(outputGain);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
    return {
      input: inputGain,
      output: outputGain,
      connect: (source) => {
        source.connect(inputGain);
        inputGain.connect(outputGain); // –ü—Ä—è–º–æ–π —Å–∏–≥–Ω–∞–ª
        delayNodes.forEach(({ delay }) => {
          inputGain.connect(delay); // –°–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
        });
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —ç—Ö–æ
   */
  createEchoEffect({ delay = 0.3, feedback = 0.02 } = {}) {
    const inputGain = this.audioContext.createGain();
    const outputGain = this.audioContext.createGain();
    const delayNode = this.audioContext.createDelay(2); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    const feedbackGain = this.audioContext.createGain();
    const echoOutputGain = this.audioContext.createGain();
    
    delayNode.delayTime.value = delay;
    feedbackGain.gain.value = feedback;
    echoOutputGain.gain.value = 0.02; // –ì—Ä–æ–º–∫–æ—Å—Ç—å —ç—Ö–æ
    outputGain.gain.value = 0.8;
    
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É —ç—Ö–æ
    delayNode.connect(feedbackGain);
    feedbackGain.connect(delayNode);
    delayNode.connect(echoOutputGain);
    
    return {
      input: inputGain,
      output: outputGain,
      connect: (source) => {
        source.connect(inputGain);
        inputGain.connect(outputGain); // –ü—Ä—è–º–æ–π —Å–∏–≥–Ω–∞–ª
        inputGain.connect(delayNode); // –°–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
        echoOutputGain.connect(outputGain); // –≠—Ö–æ —Å–∏–≥–Ω–∞–ª
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≤–∏–±—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–Ω—ã
   */
  createVibratoEffect({ speed = 5, depth = 0.02 } = {}) {
    const inputGain = this.audioContext.createGain();
    const outputGain = this.audioContext.createGain();
    const oscillator = this.audioContext.createOscillator();
    const gainModulator = this.audioContext.createGain();
    
    oscillator.frequency.value = speed;
    oscillator.type = 'sine';
    gainModulator.gain.value = depth;
    
    oscillator.connect(gainModulator);
    gainModulator.connect(inputGain.gain); // –ú–æ–¥—É–ª–∏—Ä—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
    
    const now = this.audioContext.currentTime;
    oscillator.start(now);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤
    this.currentSounds.add(oscillator);
    
    return {
      input: inputGain,
      output: outputGain,
      connect: (source) => {
        source.connect(inputGain);
        inputGain.connect(outputGain);
      }
    };
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –≥–∏—Ç–∞—Ä—ã
   */
  getGuitarEffects() {
    return {
      reverb: 0.4, // –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—è –¥–ª—è –≥–∏—Ç–∞—Ä—ã
      echo: {
        delay: 0.3,
        feedback: 0.2,
        repetitions: 2
      },
      stringVibrato: {
        speed: 6, // –ë—ã—Å—Ç—Ä–∞—è –≤–∏–±—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–Ω—ã
        depth: 0.03
      }
    };
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–∏–∞–Ω–∏–Ω–æ
   */
  getPianoEffects() {
    return {
      reverb: 0.6, // –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–∞—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–∏–∞–Ω–∏–Ω–æ (–∫–∞–∫ –≤ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–º –∑–∞–ª–µ)
      echo: {
        delay: 0.5,
        feedback: 0.15,
        repetitions: 1
      },
      stringVibrato: {
        speed: 4, // –ë–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –ø–∏–∞–Ω–∏–Ω–æ
        depth: 0.015
      }
    };
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤—É–∫–∏
   */
  stopAll() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    this.shouldStopGlobal = true;
    
    this.currentSounds.forEach(sound => {
      try {
        if (sound.stop) {
          sound.stop();
        } else if (sound.oscillator) {
          sound.oscillator.stop();
        }
      } catch {
        // –ó–≤—É–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      }
    });
    this.currentSounds.clear();
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  resetStopFlag() {
    this.shouldStopGlobal = false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  shouldStop() {
    return this.shouldStopGlobal;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å (0.0 - 1.0)
   */
  setVolume(volume) {
    if (this.gainNode) {
      this.gainNode.gain.value = Math.max(0, Math.min(1, volume));
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ—Ç—ã –≤ —á–∞—Å—Ç–æ—Ç—É
   */
  noteToFrequency(noteName) {
    const noteMap = {
      'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3,
      'E': 4, 'F': 5, 'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8,
      'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11
    };

    const match = noteName.match(/^([A-G][#b]?)(\d+)$/);
    if (!match) return null;

    const [, note, octave] = match;
    const noteIndex = noteMap[note];
    if (noteIndex === undefined) return null;

    const octaveNumber = parseInt(octave);
    const semitonesFromC4 = noteIndex + (octaveNumber - 4) * 12;
    
    // A4 = 440 Hz, –∫–∞–∂–¥–∞—è –æ–∫—Ç–∞–≤–∞ = —É–¥–≤–æ–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    return 440 * Math.pow(2, (semitonesFromC4 - 9) / 12);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ç—ã –∞–∫–∫–æ—Ä–¥–∞ (–¥–ª—è –ø–∏–∞–Ω–∏–Ω–æ - 3 –Ω–æ—Ç—ã)
   */
  getChordNotes(chordName) {
    const chordMap = {
      'C': ['C4', 'E4', 'G4'],
      'D': ['D4', 'F#4', 'A4'],
      'E': ['E4', 'G#4', 'B4'],
      'F': ['F4', 'A4', 'C5'],
      'G': ['G4', 'B4', 'D5'],
      'A': ['A4', 'C#5', 'E5'],
      'B': ['B4', 'D#5', 'F#5'],
      
      'Cm': ['C4', 'Eb4', 'G4'],
      'Dm': ['D4', 'F4', 'A4'],
      'Em': ['E4', 'G4', 'B4'],
      'Fm': ['F4', 'Ab4', 'C5'],
      'Gm': ['G4', 'Bb4', 'D5'],
      'Am': ['A4', 'C5', 'E5'],
      'Bm': ['B4', 'D5', 'F#5'],
      
      'C7': ['C4', 'E4', 'G4', 'Bb4'],
      'D7': ['D4', 'F#4', 'A4', 'C5'],
      'E7': ['E4', 'G#4', 'B4', 'D5'],
      'F7': ['F4', 'A4', 'C5', 'Eb5'],
      'G7': ['G4', 'B4', 'D5', 'F5'],
      'A7': ['A4', 'C#5', 'E5', 'G5'],
      'B7': ['B4', 'D#5', 'F#5', 'A5'],
    };

    return chordMap[chordName] || null;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ç—ã –≥–∏—Ç–∞—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ (–≤—Å–µ–≥–¥–∞ 5 –Ω–æ—Ç, –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –≥–∏—Ç–∞—Ä–µ)
   */
  getGuitarChordNotes(chordName) {
    const guitarChordMap = {
      // –ú–∞–∂–æ—Ä–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã - 5 –Ω–æ—Ç (–∫–∞–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∞–∫–∫–æ—Ä–¥–∞—Ö)
      'C': ['C3', 'E3', 'G3', 'C4', 'E4'],
      'D': ['D3', 'A3', 'D4', 'F#4', 'A4'],
      'E': ['E3', 'B3', 'E4', 'G#4', 'B4'],
      'F': ['F2', 'C3', 'F3', 'A3', 'C4'],
      'G': ['G3', 'B3', 'D4', 'G4', 'B4'],
      'A': ['A2', 'E3', 'A3', 'C#4', 'E4'],
      'B': ['B2', 'F#3', 'B3', 'D#4', 'F#4'],
      
      // –ú–∏–Ω–æ—Ä–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã - 5 –Ω–æ—Ç
      'Cm': ['C3', 'Eb3', 'G3', 'C4', 'Eb4'],
      'Dm': ['D3', 'A3', 'D4', 'F4', 'A4'],
      'Em': ['E3', 'B3', 'E4', 'G4', 'B4'],
      'Fm': ['F2', 'C3', 'F3', 'Ab3', 'C4'],
      'Gm': ['G2', 'Bb2', 'D3', 'G3', 'Bb3'],
      'Am': ['A2', 'E3', 'A3', 'C4', 'E4'],
      'Bm': ['B2', 'F#3', 'B3', 'D4', 'F#4'],
      
      // –°–µ–ø—Ç–∞–∫–∫–æ—Ä–¥—ã - 5 –Ω–æ—Ç (–¥–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 5 –Ω–æ—Ç)
      'C7': ['C3', 'E3', 'G3', 'Bb3', 'C4'],
      'D7': ['D3', 'A3', 'C4', 'D4', 'F#4'],
      'E7': ['E3', 'B3', 'D4', 'E4', 'G#4'],
      'F7': ['F2', 'C3', 'Eb3', 'F3', 'A3'],
      'G7': ['G2', 'B2', 'D3', 'F3', 'G3'],
      'A7': ['A2', 'E3', 'G3', 'A3', 'C#4'],
      'B7': ['B2', 'F#3', 'A3', 'B3', 'D#4'],
    };

    return guitarChordMap[chordName] || null;
  }


  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—ç–º–ø–ª –ø–∏–∞–Ω–∏–Ω–æ –¥–ª—è –∞–∫–∫–æ—Ä–¥–æ–≤ (—Ç–æ–ª—å–∫–æ SoundFont)
   */
  async loadPianoSampleForChord(noteName) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SoundFont –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏–∞–Ω–∏–Ω–æ
    if (soundfontLoader && soundfontLoader.isNoteAvailable(noteName)) {
      try {
        console.log(`üéπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏–∞–Ω–∏–Ω–æ SoundFont –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞: ${noteName}`);
        const soundfontBuffer = await soundfontLoader.loadNoteSample(noteName);
        if (soundfontBuffer) {
          console.log(`‚úÖ –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏–∞–Ω–∏–Ω–æ SoundFont –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ ${noteName}`);
          return soundfontBuffer;
        }
      } catch (soundfontError) {
        console.warn(`SoundFont –Ω–µ –ø–æ–º–æ–≥ –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ ${noteName}:`, soundfontError);
      }
    }
    
    throw new Error(`SoundFont –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–æ—Ç—ã –∞–∫–∫–æ—Ä–¥–∞ ${noteName}`);
  }

  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—ç–º–ø–ª –≥–∏—Ç–∞—Ä—ã –¥–ª—è –∞–∫–∫–æ—Ä–¥–æ–≤ (—Ç–æ–ª—å–∫–æ SoundFont)
   */
  async loadGuitarSampleForChord(noteName) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SoundFont –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞
    if (guitarSoundfontLoader && guitarSoundfontLoader.isNoteAvailable(noteName)) {
      try {
        console.log(`üé∏ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—É—Å—Ç–∏—á–µ—Å–∫—É—é –≥–∏—Ç–∞—Ä—É SoundFont –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞: ${noteName}`);
        const soundfontBuffer = await guitarSoundfontLoader.loadNoteSample(noteName);
        if (soundfontBuffer) {
          console.log(`‚úÖ –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞ SoundFont –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ ${noteName}`);
          return soundfontBuffer;
        }
      } catch (soundfontError) {
        console.warn(`SoundFont –Ω–µ –ø–æ–º–æ–≥ –¥–ª—è –≥–∏—Ç–∞—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ ${noteName}:`, soundfontError);
      }
    }
    
    throw new Error(`SoundFont –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–æ—Ç—ã –≥–∏—Ç–∞—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ ${noteName}`);
  }



  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è —Å—ç–º–ø–ª–∞ –∞–∫–∫–æ—Ä–¥–∞ –≥–∏—Ç–∞—Ä—ã
   */
  getGuitarChordSampleUrl(chordName) {
    const baseUrl = '/audio/samples/guitar';
    return `${baseUrl}/${chordName}.mp3`;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è —Å—ç–º–ø–ª–∞ –∞–∫–∫–æ—Ä–¥–∞ (legacy)
   */
  getChordSampleUrl(chordName) {
    return this.getGuitarChordSampleUrl(chordName);
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≥–∏—Ç–∞—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –Ω–æ—Ç SoundFont
   */
  async playGuitarChordFromNotes(notes, duration = 2.0) {
    if (!this.isInitialized) {
      await this.initialize();
    }
    await this.resumeContext();

    console.log(`üé∏ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–∏—Ç–∞—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ –∏–∑ –Ω–æ—Ç: ${notes.join(', ')}`);
    const allSounds = [];
    const now = this.audioContext.currentTime;

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –Ω–æ—Ç—É –∞–∫–∫–æ—Ä–¥–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (let i = 0; i < notes.length; i++) {
      const note = notes[i];
      const delay = i * 0.04; // 40–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏ –¥–ª—è –∞—Ä–ø–µ–¥–∂–∏–æ
      console.log(`üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ—Ç—É ${i + 1}/${notes.length}: ${note} (–∑–∞–¥–µ—Ä–∂–∫–∞: ${delay}—Å)`);
      
      try {
        // –î–ª—è –≥–∏—Ç–∞—Ä–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏—Ç–∞—Ä–Ω—ã–π SoundFont
        const audioBuffer = await this.loadGuitarSampleForChord(note);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≥–∏—Ç–∞—Ä—ã
        const effects = this.getGuitarEffects();
        const source = this.playAudioBuffer(audioBuffer, 5.5, effects, delay);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        source.stop(now + delay + duration);
        
        allSounds.push(source);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤—É–∫–∏
        this.currentSounds.add(source);
        source.onended = () => {
          this.currentSounds.delete(source);
        };
        
        console.log(`‚úÖ –ù–æ—Ç–∞ ${note} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–∏—Ç–∞—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥`);
        
      } catch (error) {
        console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ—Ç—É ${note} –¥–ª—è –≥–∏—Ç–∞—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞:`, error);
      }
    }
    
    console.log(`üé∏ –ì–∏—Ç–∞—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ–∑–¥–∞–Ω–æ ${allSounds.length} –∑–≤—É–∫–æ–≤ –∏–∑ ${notes.length} –Ω–æ—Ç`);
    return allSounds;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞–∫–∫–æ—Ä–¥ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –Ω–æ—Ç FluidR3_GM
   */
  async playChordFromNotes(notes, duration = 2.0) {
    if (!this.isInitialized) {
      await this.initialize();
    }
    await this.resumeContext();

    console.log(`üéπ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ –∏–∑ –Ω–æ—Ç: ${notes.join(', ')}`);
    const allSounds = [];
    const now = this.audioContext.currentTime;

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –Ω–æ—Ç—É –∞–∫–∫–æ—Ä–¥–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (let i = 0; i < notes.length; i++) {
      const note = notes[i];
      const delay = i * 0.04; // 40–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏ –¥–ª—è –∞—Ä–ø–µ–¥–∂–∏–æ
      console.log(`üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ—Ç—É ${i + 1}/${notes.length}: ${note} (–∑–∞–¥–µ—Ä–∂–∫–∞: ${delay}—Å)`);
      
      try {
        // –î–ª—è –∞–∫–∫–æ—Ä–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º vL (–º—è–≥–∫–∏–µ –Ω–æ—Ç—ã)
        const audioBuffer = await this.loadPianoSampleForChord(note);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –ø–∏–∞–Ω–∏–Ω–æ
        const effects = this.getPianoEffects();
        const source = this.playAudioBuffer(audioBuffer, 10, effects, delay);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        source.stop(now + delay + duration);
        
        allSounds.push(source);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤—É–∫–∏
        this.currentSounds.add(source);
        source.onended = () => {
          this.currentSounds.delete(source);
        };
        
      } catch (error) {
        console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ—Ç—É ${note} –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞:`, error);
      }
    }

    console.log(`üéπ –ê–∫–∫–æ—Ä–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ–∑–¥–∞–Ω–æ ${allSounds.length} –∑–≤—É–∫–æ–≤ –∏–∑ ${notes.length} –Ω–æ—Ç`);
    return allSounds;
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
   */
  destroy() {
    this.stopAll();
    if (this.audioContext && this.audioContext.state !== 'closed') {
      this.audioContext.close();
    }
    this.audioBuffers.clear();
    this.isInitialized = false;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const audioPlayer = new AudioPlayer();

export default audioPlayer;
